setwd("/mnt/nfs/netapp2/grad/yliu255/s7400/STAT7400/HW8")
getwd()
sin(pi)
sin(0)
sin(pi/2)
sin(pi/3)
sin(pi/3)^2
? with
library(MASS)
? data
data(geyser)
geyser
geyser2<-data.frame(as.data.frame(geyser[-1,]),
pduration=geyser$duration[-299])
geyser2
attach(geyser2)
pduration
duration
waiting
? lowess
plot(lowess(pduration,waiting), col="red")
with(geyser2,
tkranim(function(v) {
plot(pduration, waiting)
lines(smooth.spline(pduration, waiting, spar = v))
}, 1, 0, 1.5))
? lowess
lowess(pduration,waiting)
sord(duration)
sort(duration)
fit ,- lowess(pduration,waiting)
fit <- lowess(pduration,waiting)
sort(duration)
sort(duration) - fit$x
? f
? sapply
? rnorm
sigma <- 0.1
n <- 50
sigma <- 0.1
N <- 10^4
i <- c(1:n)
x <- i/(n+1)
m <- function(x){
1 - sin(5*x)^2*exp(-4*x)
}
rnorm(n, 0, sigma)
m.x <- m(x)
m.x
source("tkdens.R")
library(rgl)
data(geyser)
tkdens(geyser$duration,
show = function(x) plot(x, xlim = c(0, 6), ylim = c(0, 1.2)))
tkdens(geyser$duration,
show = function(x) plot(x, xlim = c(0,6), ylim = c(0, 1.2)),
tkrplot = TRUE)
? set.seed
set.seed(100)
rnorm(n, 0, sigma)
rnorm(n, 0, sigma)
rnorm(n, 0, sigma)
set.seed(100)
set.seed(100)
rnorm(n, 0, sigma)
eps <- rnorm(n, 0, sigma)
y <- m.x + eps
lowess(x, y)
x
lowess(x, y)$x - x
lowess(x, y)$y - y
? smooth.spline
smooth.spline(x,y)
summary(smooth.spline)
summary(smooth.spline(x,y))
? lowess
smooth.spline(x,y)$y
smooth.spline(x,y)$y-y
smooth.spline(x,y)$x-x
? supsmu
supsmu(x,y)
? loess
loess(y~x)
summary(loess(y~x))
mod <- loess(y~x)
names(mod)
loess(y~x)$fitted
loess(y~x)$fitted-y
library(mgcv)
? gam
gam(y~x(x))
gam(y~s(x))
gam(y~s(x))$fitted
gam(y~s(x))$fitted-y
mean(y)
gam(y~s(x))$fitted-(y-mean(y))
gam(y~s(x))$fitted-y
fit.loe[j,] <- loess(y~x)$fitted
gam(y~s(x))$fitted
gam(y~s(x))$fitted-y
mean(gam(y~s(x))$fitted-y)
#Problem 1
#(a)
library(mgcv)
n <- 50
sigma <- 0.1
N <- 10^4
i <- c(1:n)
x <- i/(n+1)
m <- function(x){
1 - sin(5*x)^2*exp(-4*x)
}
m.x <- m(x)
#Matrices to store the fitted values
fit.sm <- matrix(NA, N, n)
fit.low <- matrix(NA, N, n)
fit.sup <- matrix(NA, N, n)
fit.loe <- matrix(NA, N, n)
fit.gam <- matrix(NA, N, n)
set.seed(100)
for (j in 1:N){
eps <- rnorm(n, 0, sigma)
y <- m.x + eps
fit.sm[j,] <- smooth.spline(x,y)$y
fit.low[j,] <- lowess(x,y)$y
fit.sup[j,] <- supsmu(x,y)$y
fit.loe[j,] <- loess(y~x)$fitted
fit.gam[j,] <- gam(y~s(x))$fitted
}
j
fit.sm
#Matrices to store the fitted values
fit.sm <- matrix(NA, N, n)
fit.low <- matrix(NA, N, n)
fit.sup <- matrix(NA, N, n)
fit.loe <- matrix(NA, N, n)
fit.gam <- matrix(NA, N, n)
set.seed(100)
for (j in 1:N){
eps <- rnorm(n, 0, sigma)
y <- m.x + eps
fit.sm[j,] <- smooth.spline(x,y)$y
fit.low[j,] <- lowess(x,y)$y
fit.sup[j,] <- supsmu(x,y)$y
fit.loe[j,] <- loess(y~x)$fitted
fit.gam[j,] <- gam(y~s(x))$fitted
}
? matrix
m.x
fit.sm.bias <- colMeans(fit.sm-matrix(m.x, N, n, byrow =TRUE))
fit.sm.bias
matrix(m.x, N, n, byrow =TRUE)
fit.sm.bias <- colMeans(fit.sm-matrix(m.x, N, n, byrow =TRUE))
fit.sm.bias <- colMeans(fit.sm-matrix(m.x, N, n, byrow =TRUE))
fit.low.bias <- colMeans(fit.low-matrix(m.x, N, n, byrow =TRUE))
fit.sup.bias <- colMeans(fit.sup-matrix(m.x, N, n, byrow =TRUE))
fit.loe.bias <- colMeans(fit.loe-matrix(m.x, N, n, byrow =TRUE))
fit.gam.bias <- colMeans(fit.gam-matrix(m.x, N, n, byrow =TRUE))
plot(x, fit.sm.bias)
lines(x,fit.low.bias)
plot(x, fit.sm.bias, ylim = range(c(fit.sm.bias, fit.low.bias, fit.sup.bias,
fit.loe.bias, fit.gam.bias)), lty = 1)
? plot
plot(x, fit.sm.bias, ylab = "Bias", mian = "Bias of Estimates",
ylim = range(c(fit.sm.bias, fit.low.bias, fit.sup.bias, fit.loe.bias,
fit.gam.bias)), type = "l")
plot(x, fit.sm.bias, ylab = "Bias", main = "Bias of Estimates",
ylim = range(c(fit.sm.bias, fit.low.bias, fit.sup.bias, fit.loe.bias,
fit.gam.bias)), type = "l")
plot(x, fit.sm.bias, ylab = "Bias", main = "Bias of Estimates",
ylim = range(c(fit.sm.bias, fit.low.bias, fit.sup.bias, fit.loe.bias,
fit.gam.bias)), type = "l")
fit.sm.bias <- colMeans(fit.sm-matrix(m.x, N, n, byrow =TRUE))
fit.low.bias <- colMeans(fit.low-matrix(m.x, N, n, byrow =TRUE))
fit.sup.bias <- colMeans(fit.sup-matrix(m.x, N, n, byrow =TRUE))
fit.loe.bias <- colMeans(fit.loe-matrix(m.x, N, n, byrow =TRUE))
fit.gam.bias <- colMeans(fit.gam-matrix(m.x, N, n, byrow =TRUE))
plot(x, fit.sm.bias, ylab = "Bias", main = "Bias of Estimates",
ylim = range(c(fit.sm.bias, fit.low.bias, fit.sup.bias, fit.loe.bias,
fit.gam.bias)), type = "l")
lines(x, fit.low.bias, col="red")
lines(x, fit.sup.bias, col="blue")
lines(x, fit.loe.bias, col="green")
lines(x, fit.gam.bias, col="orange")
? abs
? abline
abline(0)
plot(x, fit.sm.bias, ylab = "Bias", main = "Bias of Estimates",
ylim = range(c(fit.sm.bias, fit.low.bias, fit.sup.bias, fit.loe.bias,
fit.gam.bias)), type = "l")
lines(x, fit.low.bias, col="red")
lines(x, fit.sup.bias, col="blue")
lines(x, fit.loe.bias, col="green")
lines(x, fit.gam.bias, col="orange")
abline(0,0)
? abline
abline(0,0, \dots)
? pars
plot(x, fit.sm.bias, ylab = "Bias", main = "Bias of Estimates",
ylim = range(c(fit.sm.bias, fit.low.bias, fit.sup.bias, fit.loe.bias,
fit.gam.bias)), type = "l")
lines(x, fit.low.bias, col="red")
lines(x, fit.sup.bias, col="blue")
lines(x, fit.loe.bias, col="green")
lines(x, fit.gam.bias, col="orange")
abline(0,0, lty=2)
plot(x, fit.sm.bias, ylab = "Bias", main = "Bias of Estimates",
ylim = range(c(fit.sm.bias, fit.low.bias, fit.sup.bias, fit.loe.bias,
fit.gam.bias)), type = "l")
lines(x, fit.low.bias, col="red")
lines(x, fit.sup.bias, col="blue")
lines(x, fit.loe.bias, col="green")
lines(x, fit.gam.bias, col="orange")
abline(0,0, lty=3)
m.x
m.true <- matrix(m.x, N, n, byrow =TRUE)
fit.sm.bias <- colMeans(fit.sm-m.true)
fit.low.bias <- colMeans(fit.low-m.true)
fit.sup.bias <- colMeans(fit.sup-m.true)
fit.loe.bias <- colMeans(fit.loe-m.true)
fit.gam.bias <- colMeans(fit.gam-m.true)
plot(x, fit.sm.bias, ylab = "Bias", main = "Bias of Estimates",
ylim = range(c(fit.sm.bias, fit.low.bias, fit.sup.bias, fit.loe.bias,
fit.gam.bias)), type = "l")
lines(x, fit.low.bias, col="red")
lines(x, fit.sup.bias, col="blue")
lines(x, fit.loe.bias, col="green")
lines(x, fit.gam.bias, col="orange")
abline(0,0, lty=3)
? sd
? apply
fit.sm.se <- apply(fit.sm-m.true, 2, sd)
fit.sm.se
? sd
m.true
fit.sm.se <- apply(fit.sm-m.true, 2, sd)
fit.sm.se <- apply(fit.sm-m.true, 2, sd)
#Calcualte standard error
fit.sm.se <- apply(fit.sm-m.true, 2, sd)
fit.low.se <- apply(fit.low-m.true, 2, sd)
fit.sup.se <- apply(fit.sup-m.true, 2, sd)
fit.loe.se <- apply(fit.loe-m.true, 2, sd)
fit.gam.se <- apply(fit.gam-m.true, 2, sd)
#Plot standard error
plot(x, fit.sm.se, ylab = "Standard Errors",
main = "Standard Errors of Estimates",
ylim = range(c(fit.sm.se, fit.low.se, fit.sup.se, fit.loe.se,
fit.gam.se)), type = "l")
lines(x, fit.low.se, col="red")
lines(x, fit.sup.se, col="blue")
lines(x, fit.loe.se, col="green")
lines(x, fit.gam.se, col="orange")
abline(0,0, lty=3)
#Plot bias
plot(x, fit.sm.bias, ylab = "Bias", main = "Bias of Estimates",
ylim = range(c(fit.sm.bias, fit.low.bias, fit.sup.bias, fit.loe.bias,
fit.gam.bias)), type = "l")
lines(x, fit.low.bias, col="red")
lines(x, fit.sup.bias, col="blue")
lines(x, fit.loe.bias, col="green")
lines(x, fit.gam.bias, col="orange")
abline(0,0, lty=3)
legend("bottomright",legend=c("smooth.spline","lowess","supsmu","loess","gam"),
lty=1, col=c("black","red","blue","green", "orange"))
plot(x, fit.sm.se, ylab = "Standard Errors",
main = "Standard Errors of Estimates",
ylim = range(c(fit.sm.se, fit.low.se, fit.sup.se, fit.loe.se,
fit.gam.se)), type = "l")
lines(x, fit.low.se, col="red")
lines(x, fit.sup.se, col="blue")
lines(x, fit.loe.se, col="green")
lines(x, fit.gam.se, col="orange")
abline(0,0, lty=3)
legend("topright",legend=c("smooth.spline","lowess","supsmu","loess","gam"),
lty=1, col=c("black","red","blue","green", "orange"))
#Plot standard error
plot(x, fit.sm.se, ylab = "Standard Errors",
main = "Standard Errors of Estimates",
ylim = range(c(fit.sm.se, fit.low.se, fit.sup.se, fit.loe.se,
fit.gam.se)), type = "l")
lines(x, fit.low.se, col="red")
lines(x, fit.sup.se, col="blue")
lines(x, fit.loe.se, col="green")
lines(x, fit.gam.se, col="orange")
legend("topright",legend=c("smooth.spline","lowess","supsmu","loess","gam"),
lty=1, col=c("black","red","blue","green", "orange"))
#Calcualte standard error
fit.sm.se <- apply(fit.sm, 2, sd)
fit.low.se <- apply(fit.low, 2, sd)
fit.sup.se <- apply(fit.sup, 2, sd)
fit.loe.se <- apply(fit.loe, 2, sd)
fit.gam.se <- apply(fit.gam, 2, sd)
#Plot standard error
plot(x, fit.sm.se, ylab = "Standard Errors",
main = "Standard Errors of Estimates",
ylim = range(c(fit.sm.se, fit.low.se, fit.sup.se, fit.loe.se,
fit.gam.se)), type = "l")
lines(x, fit.low.se, col="red")
lines(x, fit.sup.se, col="blue")
lines(x, fit.loe.se, col="green")
lines(x, fit.gam.se, col="orange")
legend("topright",legend=c("smooth.spline","lowess","supsmu","loess","gam"),
lty=1, col=c("black","red","blue","green", "orange"))
sigma <- seq(0.1, 2, 0.1)
sigma
sigma <- seq(0.1, 2, 0.2)
sigma
sigma <- seq(0.1, 5, 0.1)
sigma
sigma <- 0.1
#(b)
sigma <- seq(0.1, 2, 0.1)
N <- 10^3
fit.sm.amse <- rep(NA, lenght(sigma))
fit.low.amse <- rep(NA, lenght(sigma))
fit.sup.amse <- rep(NA, lenght(sigma))
fit.loe.amse <- rep(NA, lenght(sigma))
fit.gam.amse <- rep(NA, lenght(sigma))
#Matrices to store the fitted values
fit.sm <- matrix(NA, N, n)
fit.low <- matrix(NA, N, n)
fit.sup <- matrix(NA, N, n)
fit.loe <- matrix(NA, N, n)
fit.gam <- matrix(NA, N, n)
#Calcualte aMSE
set.seed(100)
for (i in 1:length(sigma)){
for (j in 1:N){
eps <- rnorm(n, 0, sigma[i])
y <- m.x + eps
fit.sm[j,] <- smooth.spline(x,y)$y
fit.low[j,] <- lowess(x,y)$y
fit.sup[j,] <- supsmu(x,y)$y
fit.loe[j,] <- loess(y~x)$fitted
fit.gam[j,] <- gam(y~s(x))$fitted
}
fit.sm.amse[i] <- mean(colMeans((fit.sm - m.true)^2))
fit.low.amse[i] <- mean(colMeans((fit.low - m.true)^2))
fit.sup.amse[i] <- mean(colMeans((fit.sup - m.true)^2))
fit.loe.amse[i] <- mean(colMeans((fit.loe - m.true)^2))
fit.gam.amse[i] <- mean(colMeans((fit.gam - m.true)^2))
}
#Plot aMSE
plot(sigma, fit.sm.amse, ylab = "aMSE",
main = "aMSE of Estimates",
ylim = range(c(fit.sm.amse, fit.low.amse, fit.sup.amse, fit.loe.amse,
fit.gam.amse)), type = "l")
lines(sigma, fit.low.amse, col="red")
lines(sigma, fit.sup.amse, col="blue")
lines(sigma, fit.loe.amse, col="green")
lines(sigma, fit.gam.amse, col="orange")
legend("topright",legend=c("smooth.spline","lowess","supsmu","loess","gam"),
lty=1, col=c("black","red","blue","green", "orange"))
m.x
sigma <- seq(0.1, 2, 0.1)
N <- 10^3
fit.sm.amse <- rep(NA, lenght(sigma))
fit.low.amse <- rep(NA, lenght(sigma))
fit.sup.amse <- rep(NA, lenght(sigma))
fit.loe.amse <- rep(NA, lenght(sigma))
fit.gam.amse <- rep(NA, lenght(sigma))
#Matrices to store the fitted values
fit.sm <- matrix(NA, N, n)
fit.low <- matrix(NA, N, n)
fit.sup <- matrix(NA, N, n)
fit.loe <- matrix(NA, N, n)
fit.gam <- matrix(NA, N, n)
m.true <- matrix(m.x, N, n, byrow =TRUE)
#Calcualte aMSE
set.seed(100)
for (i in 1:length(sigma)){
for (j in 1:N){
eps <- rnorm(n, 0, sigma[i])
y <- m.x + eps
fit.sm[j,] <- smooth.spline(x,y)$y
fit.low[j,] <- lowess(x,y)$y
fit.sup[j,] <- supsmu(x,y)$y
fit.loe[j,] <- loess(y~x)$fitted
fit.gam[j,] <- gam(y~s(x))$fitted
}
fit.sm.amse[i] <- mean(colMeans((fit.sm - m.true)^2))
fit.low.amse[i] <- mean(colMeans((fit.low - m.true)^2))
fit.sup.amse[i] <- mean(colMeans((fit.sup - m.true)^2))
fit.loe.amse[i] <- mean(colMeans((fit.loe - m.true)^2))
fit.gam.amse[i] <- mean(colMeans((fit.gam - m.true)^2))
}
#Plot aMSE
plot(sigma, fit.sm.amse, ylab = "aMSE",
main = "aMSE of Estimates",
ylim = range(c(fit.sm.amse, fit.low.amse, fit.sup.amse, fit.loe.amse,
fit.gam.amse)), type = "l")
lines(sigma, fit.low.amse, col="red")
lines(sigma, fit.sup.amse, col="blue")
lines(sigma, fit.loe.amse, col="green")
lines(sigma, fit.gam.amse, col="orange")
legend("topright",legend=c("smooth.spline","lowess","supsmu","loess","gam"),
lty=1, col=c("black","red","blue","green", "orange"))
fit.sm.amse
fit.sm.smse
fit.sm.amse <- rep(NA, lenght(sigma))
sigma <- seq(0.1, 2, 0.1)
N <- 10^3
fit.sm.amse <- rep(NA, length(sigma))
fit.low.amse <- rep(NA, length(sigma))
fit.sup.amse <- rep(NA, length(sigma))
fit.loe.amse <- rep(NA, length(sigma))
fit.gam.amse <- rep(NA, length(sigma))
#Matrices to store the fitted values
fit.sm <- matrix(NA, N, n)
fit.low <- matrix(NA, N, n)
fit.sup <- matrix(NA, N, n)
fit.loe <- matrix(NA, N, n)
fit.gam <- matrix(NA, N, n)
m.true <- matrix(m.x, N, n, byrow =TRUE)
#Calcualte aMSE
set.seed(100)
for (i in 1:length(sigma)){
for (j in 1:N){
eps <- rnorm(n, 0, sigma[i])
y <- m.x + eps
fit.sm[j,] <- smooth.spline(x,y)$y
fit.low[j,] <- lowess(x,y)$y
fit.sup[j,] <- supsmu(x,y)$y
fit.loe[j,] <- loess(y~x)$fitted
fit.gam[j,] <- gam(y~s(x))$fitted
}
fit.sm.amse[i] <- mean(colMeans((fit.sm - m.true)^2))
fit.low.amse[i] <- mean(colMeans((fit.low - m.true)^2))
fit.sup.amse[i] <- mean(colMeans((fit.sup - m.true)^2))
fit.loe.amse[i] <- mean(colMeans((fit.loe - m.true)^2))
fit.gam.amse[i] <- mean(colMeans((fit.gam - m.true)^2))
}
#Plot aMSE
plot(sigma, fit.sm.amse, ylab = "aMSE",
main = "aMSE of Estimates",
ylim = range(c(fit.sm.amse, fit.low.amse, fit.sup.amse, fit.loe.amse,
fit.gam.amse)), type = "l")
lines(sigma, fit.low.amse, col="red")
lines(sigma, fit.sup.amse, col="blue")
lines(sigma, fit.loe.amse, col="green")
lines(sigma, fit.gam.amse, col="orange")
legend("topright",legend=c("smooth.spline","lowess","supsmu","loess","gam"),
lty=1, col=c("black","red","blue","green", "orange"))
plot(sigma, fit.sm.amse, ylab = "aMSE",
main = "aMSE of Estimates",
ylim = range(c(fit.sm.amse, fit.low.amse, fit.sup.amse, fit.loe.amse,
fit.gam.amse)), type = "l")
lines(sigma, fit.low.amse, col="red")
lines(sigma, fit.sup.amse, col="blue")
lines(sigma, fit.loe.amse, col="green")
lines(sigma, fit.gam.amse, col="orange")
legend("topleft",legend=c("smooth.spline","lowess","supsmu","loess","gam"),
lty=1, col=c("black","red","blue","green", "orange"))
x <- runif(10000000)
system.time(p.qpareto(x, .5, 3, P = 1))
system.time(p.qpareto(x, .5, 3, P = 2))
system.time(p.qpareto(x, .5, 3, P = 4))
library(pareto)
?dpareto
? dgamma
stopifnot(all.equal(p.qpareto(log(seq(0,1,10^(-6))), 2, 1,
lower.tail = FALSE, log.p = TRUE, P = 2),
qpareto(log(seq(0,1,10^(-6))), 2, 1,
lower.tail = FALSE, log.p = TRUE)))
stopifnot(all.equal(p.ppareto(1:10^6, 2, 1, log.p = TRUE, P = 2),
ppareto(1:10^6, 2, 1, log.p = TRUE)))
stopifnot(all.equal(p.dpareto(1:10^6, 2, 1, P = 2), dpareto(1:10^6, 2, 1)))
library(formatR)
getwd()
tidy_source("stat7400_hw8.R")
remove.packages("pareto")
