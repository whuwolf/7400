x1 <- seq(0,1,0.01)
x2 <- seq(1.01,10,0.01)
y1 <- dpareto(x1,1,1)
y2 <- dpareto(x2,1,1)
plot(x1,y1,xlim=range(c(x1,x2)),ylim=range(c(y1,y2)),type="l")
lines(x2,y2)
dpareto <- function(x, alpha, beta, log = FALSE) {
# Calculate the maximum length of inputs
L <- max(length(x), length(alpha), length(beta))
# Align all the inputs
x <- rep(x, length.out = L)
alpha <- rep(alpha, length.out = L)
beta <- rep(beta, length.out = L)
logdens <- ifelse(alpha <= 0 | beta <= 0,
NaN,
ifelse(x <= alpha,
log(0),
log(beta) + beta * log(alpha) - (beta + 1) * log(x)))
# Check whether NaNs exist
if (sum(is.nan(logdens)))
warning("NaNs produced")
if (log) logdens else exp(logdens)
}
x1 <- seq(0,1,0.01)
x2 <- seq(1.01,10,0.01)
y1 <- dpareto(x1,1,1)
y2 <- dpareto(x2,1,1)
plot(x1,y1,xlim=range(c(x1,x2)),ylim=range(c(y1,y2)),type="l")
lines(x2,y2)
? plot
x1 <- seq(0,1,0.01)
x2 <- seq(1.01,10,0.01)
y1 <- dpareto(x1,1,1)
y2 <- dpareto(x2,1,1)
x3 <- seq(0,2,0.01)
x4 <- seq(2.01,10,0.01)
y3 <- dpareto(x3,2,3)
y4 <- dpareto(x4,2,3)
plot(x1,y1,xlim=range(c(x1,x2,x3,x4)),ylim=range(c(y1,y2,y3,y4)),type="l",col="red",xlab="x",ylab="density")
lines(x2,y2,col="red")
lines(x3,y3,col="blue")
lines(x4,y4,col="blue")
? plot
? lines
x1 <- seq(0,1,0.01)
x2 <- seq(1.01,10,0.01)
y1 <- dpareto(x1,1,1)
y2 <- dpareto(x2,1,1)
x3 <- seq(0,2,0.01)
x4 <- seq(2.01,10,0.01)
y3 <- dpareto(x3,2,3)
y4 <- dpareto(x4,2,3)
plot(x1,y1,xlim=range(c(x1,x2,x3,x4)),ylim=range(c(y1,y2,y3,y4)),type="l",col="red",xlab="x",ylab="density")
lines(x2,y2,col="red")
lines(x3,y3,col="blue",lty=2)
lines(x4,y4,col="blue",lty=2)
x1 <- seq(0,1,0.01)
x2 <- seq(1.01,10,0.01)
y1 <- dpareto(x1,1,1)
y2 <- dpareto(x2,1,1)
x3 <- seq(0,2,0.01)
x4 <- seq(2.01,10,0.01)
y3 <- dpareto(x3,2,3)
y4 <- dpareto(x4,2,3)
plot(x1,y1,xlim=range(c(x1,x2,x3,x4)),ylim=range(c(y1,y2,y3,y4)),type="l",col="red",xlab="x",ylab="density")
lines(x2,y2,col="red")
lines(x3,y3,col="blue",lty=3)
lines(x4,y4,col="blue",lty=3)
x1 <- seq(0,1,0.01)
x2 <- seq(1.01,10,0.01)
y1 <- dpareto(x1,1,1)
y2 <- dpareto(x2,1,1)
x3 <- seq(0,2,0.01)
x4 <- seq(2.01,10,0.01)
y3 <- dpareto(x3,2,3)
y4 <- dpareto(x4,2,3)
plot(x1,y1,xlim=range(c(x1,x2,x3,x4)),ylim=range(c(y1,y2,y3,y4)),type="l",col="red",xlab="x",ylab="density")
lines(x2,y2,col="red")
lines(x3,y3,col="blue",lty=2)
lines(x4,y4,col="blue",lty=2)
? legend
plot(x1,y1,xlim=range(c(x1,x2,x3,x4)),ylim=range(c(y1,y2,y3,y4)),type="l",col="red",xlab="x",ylab="density")
lines(x2,y2,col="red")
lines(x3,y3,col="blue",lty=2)
lines(x4,y4,col="blue",lty=2)
legend("topright",c(1,2),lty=c(1,3),col=c("red","blue"))
plot(x1,y1,xlim=range(c(x1,x2,x3,x4)),ylim=range(c(y1,y2,y3,y4)),type="l",col="red",xlab="x",ylab="density")
lines(x2,y2,col="red")
lines(x3,y3,col="blue",lty=2)
lines(x4,y4,col="blue",lty=2)
legend("topright",legend=c(1,2),lty=c(1,3),col=c("red","blue"))
plot(x1,y1,xlim=range(c(x1,x2,x3,x4)),ylim=range(c(y1,y2,y3,y4)),type="l",col="red",xlab="x",ylab="density")
lines(x2,y2,col="red")
lines(x3,y3,col="blue",lty=2)
lines(x4,y4,col="blue",lty=2)
legend("topright",legend=c(expression(alpha=1),expression(alpha=2)),lty=c(1,2),col=c("red","blue"))
espression(alpha)
? expression
plot(x1,y1,xlim=range(c(x1,x2,x3,x4)),ylim=range(c(y1,y2,y3,y4)),type="l",col="red",xlab="x",ylab="density")
lines(x2,y2,col="red")
lines(x3,y3,col="blue",lty=2)
lines(x4,y4,col="blue",lty=2)
legend("topright",legend=c(expression(alpha),expression(alpha)),lty=c(1,2),col=c("red","blue"))
plot(x1,y1,xlim=range(c(x1,x2,x3,x4)),ylim=range(c(y1,y2,y3,y4)),type="l",col="red",xlab="x",ylab="density")
lines(x2,y2,col="red")
lines(x3,y3,col="blue",lty=2)
lines(x4,y4,col="blue",lty=2)
legend("topright",legend=c(expression(alpha)=1,expression(alpha)),lty=c(1,2),col=c("red","blue"))
plot(x1,y1,xlim=range(c(x1,x2,x3,x4)),ylim=range(c(y1,y2,y3,y4)),type="l",col="red",xlab="x",ylab="density")
lines(x2,y2,col="red")
lines(x3,y3,col="blue",lty=2)
lines(x4,y4,col="blue",lty=2)
legend("topright",legend=c("expression(alpha)=1",expression(alpha)),lty=c(1,2),col=c("red","blue"))
plot(x1,y1,xlim=range(c(x1,x2,x3,x4)),ylim=range(c(y1,y2,y3,y4)),type="l",col="red",xlab="x",ylab="density")
lines(x2,y2,col="red")
lines(x3,y3,col="blue",lty=2)
lines(x4,y4,col="blue",lty=2)
legend("topright",legend=c("scale=1,shape=1","scale=2,shape=3"),lty=c(1,2),col=c("red","blue"))
x1 <- seq(0,1,0.01)
x2 <- seq(1.01,10,0.01)
y1 <- dpareto(x1,1,1)
y2 <- dpareto(x2,1,1)
x3 <- seq(0,2,0.01)
x4 <- seq(2.01,10,0.01)
y3 <- dpareto(x3,2,3)
y4 <- dpareto(x4,2,3)
plot(x1,y1,xlim=range(c(x1,x2,x3,x4)),ylim=range(c(y1,y2,y3,y4)),type="l",col="red",xlab="x",ylab="density",main="Pareto Distribution")
lines(x2,y2,col="red")
lines(x3,y3,col="blue",lty=2)
lines(x4,y4,col="blue",lty=2)
legend("topright",legend=c("scale=1,shape=1","scale=2,shape=3"),lty=c(1,2),col=c("red","blue"))
a <- FALSE
typeof(a)
as.integer(a)
as.integer(TRUE)
? double
double(3)
double(3)
double(56)
paretodens(1,1,1)
paretodens <- function(x, alpha, beta, log = FALSE) {
nx <- length(x)
nalpha <- length(alpha)
nbeta <- length(beta)
n <- max(nx, nalpha, nbeta)
result <- .C("paretodens",
as.double(x), as.integer(nx),
as.double(alpha), as.integer(nalpha),
as.double(beta), as.integer(nbeta),
dens = double(n), as.integer(log))
result$dens
}
paretodens(1,1,1)
paretodens(1,1,1)
dyn.load("paretodens.so")
? dyn.load
dyn.load(paretodens)
dyn.load("paretodens.so")
setwd("/mnt/nfs/netapp2/grad/yliu255/s7400/STAT7400/HW2")
dyn.load("paretodens.so")
paretodens(1,1,1)
as.integer(0)
dyn.load("paretodens.so")
paretodens <- function(x, alpha, beta, log = FALSE) {
nx <- length(x)
nalpha <- length(alpha)
nbeta <- length(beta)
n <- max(nx, nalpha, nbeta)
result <- .C("paretodens",
as.double(x), as.integer(nx),
as.double(alpha), as.integer(nalpha),
as.double(beta), as.integer(nbeta),
dens = double(n), as.integer(log))
result$dens
}
paretodens(1,1,1)
paretodens(3,-2,1)
paretodens(3,2,-1)
paretodens(3,2,1)
paretodens(1,2,3)
paretodens(3:5,2,1)
paretodens(1:5,2,1)
paretodens(6,2:4,1)
paretodens(1:5,2,1)
paretodens(1:5,2,1,TRUE)
log(paretodens(1:5,2,1))
paretodens(1:6,1:2,1)
paretodens(1,2,1:2)
paretodens(1,-1:2,1:2)
dyn.load("paretodens.so")
paretodens(1,-1:2,1:2)
paretodens(1,-1,1:2)
paretodens(5,c(-1,2,3),1:2)
paretodens(1,-1:2,1:2)
paretodens(1,-1:2,1:2)
paretodens(1,-1:2,1:2)
paretodens(1,-1:2,1:2)
paretodens(1,-1:2,1:2)
paretodens(1,-1:2,1:2)
paretodens(1,-1:2,1:2)
paretodens(1,-1:2,1:2)
paretodens(1,-1:2,1:2)
paretodens(1,-1:2,1:2)
dyn.load("paretodens.so")
paretodens(1,-1:2,1:2)
? warning
? warnings
dyn.load("paretodens.so")
paretodens(1,-1:2,1:2)
dgamma
? dgamma
dgamma(1,-1,0)
dgamma(1,-1,1)
dgamma(1,c(-1,2),1)
dyn.load("paretodensDotC.so")
paretodensDotC(1,-1:2,1:2)
paretodensDotC <- function(x, alpha, beta, log = FALSE) {
nx <- length(x)
nalpha <- length(alpha)
nbeta <- length(beta)
n <- max(nx, nalpha, nbeta)
result <- .C("paretodensDotC",
as.double(x), as.integer(nx),
as.double(alpha), as.integer(nalpha),
as.double(beta), as.integer(nbeta),
dens = double(n), as.integer(log))
result$dens
}
paretodensDotC(1,-1:2,1:2)
paretodensDotC(1,-1,2)
paretodensDotC(1:5,2,1)
paretodensDotC(1:5,-1,1)
paretodensDotC(1:5,-1:2,1)
dyn.load("paretodensDotC.so")
paretodensDotC(3,2,1,TRUE)
all.equal(log(paretodensDotC(1:5,2, 1)), paretodens](1:5,2, 1, log = TRUE))
all.equal(log(paretodensDotC(1:5,2, 1)), paretodensDotC(1:5,2, 1, log = TRUE))
all.equal(log(paretodensDotC(1:5,-1:2, 1)), paretodensDotC(1:5,-1:2, 1, log = TRUE))
paretodensDotC(3,2)
tidy_source()
library(formatR)
tidy_source("paretodensDotC.R")
paretodensDotC(3, 2, 1)
paretodensDotC(1, 2, 3)
paretodensDotC(3, -2, 1)
paretodensDotC(3, 2, -1)
paretodensDotC(3 : 5, 2, 1)
paretodensDotC(1 : 5, 2, 1)
paretodensDotC(6, 2 : 4, 1)
paretodensDotC(3, 2, 1, log = TRUE)
? library
? INSTALL
install.packages("readxl")
setwd("~/Downloads")
library(readxl)
? read_excel
read_excel("Final Data Sheet for SPSS updated.xlsx")
data <- read_excel("Final Data Sheet for SPSS updated.xlsx")
data$GENDER
data <- read.csv("Final Data Sheet for SPSS updated.csv")
data
? fisher.test
attach(data)
View(data)
fisher.test(HPV,STAGE)
fisher.test(HPV,STAGE..l.lV.)
fisher.test(HPV,STAGE..l.lV.)
fisher.test(HPV,GRADE..l.lll.)
fisher.test(HPV,LYMPH.NODE..yes.no.)
fisher.test(HPV,METASTASIS..yes.no.)
fisher.test(HPV,TYPE.OF.Disease..DCIS..IDC.MC.PC.)
fisher.test(EBV,STAGE..l.lV.)
fisher.test(EBV,GRADE..l.lll.)
fisher.test(EBV,LYMPH.NODE..yes.no.)
fisher.test(EBV,METASTASIS..yes.no.)
fisher.test(EBV,TYPE.OF.Disease..DCIS..IDC.MC.PC.)
fisher.test(HPV,STAGE..l.lV.)
fisher.test(HPV,GRADE..l.lll.)
fisher.test(HPV,LYMPH.NODE..yes.no.)
fisher.test(HPV,METASTASIS..yes.no.)
fisher.test(HPV,TYPE.OF.Disease..DCIS..IDC.MC.PC.)
fisher.test(EBV,STAGE..l.lV.)
fisher.test(EBV,GRADE..l.lll.)
fisher.test(EBV,LYMPH.NODE..yes.no.)
fisher.test(EBV,METASTASIS..yes.no.)
fisher.test(EBV,TYPE.OF.Disease..DCIS..IDC.MC.PC.)
fisher.test(MMTV,STAGE..l.lV.)
fisher.test(MMTV,GRADE..l.lll.)
fisher.test(MMTV,LYMPH.NODE..yes.no.)
fisher.test(MMTV,METASTASIS..yes.no.)
fisher.test(MMTV,TYPE.OF.Disease..DCIS..IDC.MC.PC.)
fisher.test(Co.existence,STAGE..l.lV.)
fisher.test(Co.existence,GRADE..l.lll.)
fisher.test(Co.existence,LYMPH.NODE..yes.no.)
fisher.test(Co.existence,METASTASIS..yes.no.)
fisher.test(Co.existence,TYPE.OF.Disease..DCIS..IDC.MC.PC.)
fisher.test(as.factor(Co.existence),STAGE..l.lV.)
a[1] < -fisher.test(HPV,STAGE..l.lV.)
a[2] <- fisher.test(HPV,GRADE..l.lll.)
a[3] <- fisher.test(HPV,LYMPH.NODE..yes.no.)
a[4] <- fisher.test(HPV,METASTASIS..yes.no.)
a[5] <- fisher.test(HPV,TYPE.OF.Disease..DCIS..IDC.MC.PC.)
a <- rep(0,5)
a[1] < -fisher.test(HPV,STAGE..l.lV.)
a[2] <- fisher.test(HPV,GRADE..l.lll.)
a[3] <- fisher.test(HPV,LYMPH.NODE..yes.no.)
a[4] <- fisher.test(HPV,METASTASIS..yes.no.)
a[5] <- fisher.test(HPV,TYPE.OF.Disease..DCIS..IDC.MC.PC.)
fisher.test(HPV,STAGE..l.lV.)
fisher.test(HPV,GRADE..l.lll.)
fisher.test(HPV,LYMPH.NODE..yes.no.)
fisher.test(HPV,METASTASIS..yes.no.)
fisher.test(HPV,TYPE.OF.Disease..DCIS..IDC.MC.PC.)
fisher.test(EBV,STAGE..l.lV.)
fisher.test(EBV,GRADE..l.lll.)
fisher.test(EBV,LYMPH.NODE..yes.no.)
fisher.test(EBV,METASTASIS..yes.no.)
fisher.test(EBV,TYPE.OF.Disease..DCIS..IDC.MC.PC.)
fisher.test(MMTV,STAGE..l.lV.)
fisher.test(MMTV,GRADE..l.lll.)
fisher.test(MMTV,LYMPH.NODE..yes.no.)
fisher.test(MMTV,METASTASIS..yes.no.)
fisher.test(MMTV,TYPE.OF.Disease..DCIS..IDC.MC.PC.)
fisher.test(Co.existence,GRADE..l.lll.)
package.skeleton()
? package.skeleton
getwd()
log(5)
log(1)
? heasure
library(hmeasure)
? ifelse
? max
? log
? rep
? package.skeleton
? rnorm
getwd()
? require
f <- function(x, y) x+y
g <- function(x, y) x-y
d <- data.frame(a = 1, b = 2)
e <- rnorm(1000)
package.skeleton(list = c("f","g","d","e"), name = "mypkg")
dpareto <- function(x, alpha, beta, log = FALSE) {
# Calculate the maximum length of inputs
L <- max(length(x), length(alpha), length(beta))
# Align all the inputs
x <- rep(x, length.out = L)
alpha <- rep(alpha, length.out = L)
beta <- rep(beta, length.out = L)
logdens <- ifelse(alpha <= 0 | beta <= 0,
NaN,
ifelse(x <= alpha,
log(0),
log(beta) + beta * log(alpha) - (beta + 1) * log(x)))
# Check whether NaNs exist
if (sum(is.nan(logdens)))
warning("NaNs produced")
if (log) logdens else exp(logdens)
}
package.skeleton(list="dpareto", name="pareto")
install.packages("manipulate")
hmeasure()
hmeasure
install.packages("~/Downloads/AddOne_1.0-1.tar.gz", repos = NULL, type = "source")
library(AddOne)
AddOner
AddOne
? AddOne
dpareto <- function(x, alpha, beta, log = FALSE) {
# Calculate the maximum length of inputs
L <- max(length(x), length(alpha), length(beta))
# Align all the inputs
x <- rep(x, length.out = L)
alpha <- rep(alpha, length.out = L)
beta <- rep(beta, length.out = L)
logdens <- ifelse(alpha <= 0 | beta <= 0,
NaN,
ifelse(x <= alpha,
log(0),
log(beta) + beta * log(alpha) - (beta + 1) * log(x)))
# Check whether NaNs exist
if (sum(is.nan(logdens)))
warning("NaNs produced")
if (log) logdens else exp(logdens)
}
dpareto
? package.skeleton
package.skeleton(names="pareto",code_files = "dpareto.R")
package.skeleton(name="pareto",code_files = "dpareto.R")
? bass
? base
? dnorm
? dnorm
? tidy_source
? dnorm
? dgamma
? dgamma
dpareto(1,2,4)
dpareto(3,2,4)
dpareto(3,2,4,log=TRUE)
dpareto(3,2,4,log=C(TRUE,FALSE))
dpareto(3,2,4,log=c(TRUE,FALSE))
library(fromatR)
library(fORmatR)
library(formatR)
? tidy_source
tidy_source(".\pareto\man\dpareto.Rd")
tidy_source("\pareto\man\dpareto.Rd")
tidy_source("pareto\man\dpareto.Rd")
getwd()
tidy_source("/pareto/man/dpareto.Rd")
tidy_source("/pareto/R/dpareto.R")
tidy_source(source="/pareto/R/dpareto.R")
getwd()
setwd("/mnt/nfs/netapp2/grad/yliu255/Downloads/pareto/R")
tidy_source(dpareto.R)
tidy_source("dpareto.R")
setwd("/mnt/nfs/netapp2/grad/yliu255/Downloads/pareto/man")
tidy_source("dpareto.Rd")
? dgamma
? dnorm
? dgamma
? dnorm
? dgamma
RShowDoc("KEYWORDS")
install.packages("~/Downloads/pareto_1.0-1.tar.gz", repos = NULL, type = "source")
library(pareto)
? pareto
? dgamma
? dnorm
remove.package(pareto)
remove.package
remove.packags(pareto)
remove.packages(pareto)
? remove.packages
. libpaths
.libpaths
.libpaths()
.libPaths()
remove.packages(pareto)
remove.packages("pareto")
install.packages("~/Downloads/pareto_1.0-1.tar.gz", repos = NULL, type = "source")
library(pareto)
? dpareto
? dpareto
? dgamma
? dpareto
dpareto
dpareto(3,2,1)
dpareto(3,1,1)
? dnorm
? dpareto
remove.packages("pareto")
install.packages("~/Downloads/pareto_1.0-1.tar.gz", repos = NULL, type = "source")
library(pareto)
? dpareto
? dgamma
