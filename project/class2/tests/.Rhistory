install.packages("~/s7400/STAT7400/pareto_1.0-1.tar.gz", repos = NULL, type = "source")
library(pareto)
? dpareto
dpareto(1:5, 2, 1)
dpareto(1:5, 2, 1, log = TRUE)
? dgamma
pgamma
qgamma()
qgamma
qgamma(0.9,3,2)
qgamma(0.9,3,2,log.p=TRUE)
qgamma(exp(0.9),3,2,log.p=TRUE)
exp(0.9)
qgamma(log(0.9),3,2,log.p=TRUE)
pgamma(3,3,2,log.p=TRUE)
pgamma(3,3,2)
log(pgamma(3,3,2))
pgamma(3,3,2,lowertail = FALSE, log.p = TRUE)
pgamma(3,3,2,lower.tail = FALSE, log.p = TRUE)
log(pgamma(3,3,2,lower.tail = FALSE))
? ifelse
ppareto <- function(q, alpha, beta, lower.tail = TRUE, log.p = FALSE) {
# Calculate the maximum length of inputs
L <- max(length(q), length(alpha), length(beta))
# Align all the inputs
q <- rep(q, length.out = L)
alpha <- rep(alpha, length.out = L)
beta <- rep(beta, length.out = L)
cdfs <- ifelse(alpha <= 0 | beta <= 0,
NaN,
ifelse(q <= alpha,
0,
1 - (alpha/q)^beta))
# Check whether NaNs exist
if (sum(is.nan(cdfs)))
warning("NaNs produced")
if (lower.tail){
if (log.p) log(cdfs) else cdfs
}else{
if (log.p) log(1 - cdfs) else 1-cdfs
}
}
ppareto(3,3,2)
ppareto(4,3,2)
ppareto(4,3,2, lower.tail = TRUE)
ppareto(4,3,2, lower.tail = FALSE)
ppareto(4,3,2, lower.tail = FALSE, log.p = TRUE)
log(ppareto(4,3,2, lower.tail =FALSE))
ppareto(1:3,2:3,2)
ppareto(1:3,1:2,2)
ppareto(3,1,2)
install.packages("rmutil")
library(rmutil)
ppareto
ppareto(1:3,1:2,2)
? ppareto
detach(rmutil
)
detach(rmutil)
? unload
? detach
detach("package:rmutil", unload=TRUE)
install.packages("VGAM")
library("VGAM", lib.loc="/mnt/nfs/netapp2/grad/yliu255/R/x86_64-redhat-linux-gnu-library/3.3")
library("VGAM", lib.loc="/mnt/nfs/netapp1/group/statsoft/Rlibs64")
detach("package:VGAM", unload=TRUE)
library("VGAM", lib.loc="/mnt/nfs/netapp2/grad/yliu255/R/x86_64-redhat-linux-gnu-library/3.3")
detach("package:VGAM", unload=TRUE)
remove.packages("VGAM")
library("VGAM", lib.loc="/mnt/nfs/netapp1/group/statsoft/Rlibs64")
library(VGAM)
install.packages("VGAM")
library(VGAM)
? dpareto
ppareto1 <- function(q, alpha, beta, lower.tail = TRUE, log.p = FALSE) {
# Calculate the maximum length of inputs
L <- max(length(q), length(alpha), length(beta))
# Align all the inputs
q <- rep(q, length.out = L)
alpha <- rep(alpha, length.out = L)
beta <- rep(beta, length.out = L)
cdfs <- ifelse(alpha <= 0 | beta <= 0,
NaN,
ifelse(q <= alpha,
0,
1 - (alpha/q)^beta))
# Check whether NaNs exist
if (sum(is.nan(cdfs)))
warning("NaNs produced")
if (lower.tail){
if (log.p) log(cdfs) else cdfs
}else{
if (log.p) log(1 - cdfs) else 1-cdfs
}
}
all.equal(ppareto(1:3, 2, 3), ppareto1(1:3, 2, 3))
ppareto1(1:3, 2, 3)
ppareto(1:3, 2, 3)
all.equal(ppareto(1:3, 2, 3, lower.tail = TRUE), ppareto1(1:3, 2, 3, lower.tail =TRUE))
all.equal(ppareto(1:3, 2, 3, lower.tail = TRUE, log.p = TRUE), ppareto1(1:3, 2, 3, lower.tail =TRUE))
all.equal(ppareto(1:3, 2, 3, lower.tail = TRUE, log.p = TRUE), ppareto1(1:3, 2, 3, lower.tail =TRUE, log.p =TRUE))
all.equal(ppareto(1:3, 2, 3, lower.tail = TRUE, log.p = TRUE),log(ppareto1(1:3, 2, 3, lower.tail =TRUE)))
? dgamma
? dpareto
pgamma(1,2,2)
pgamma(2,2,2)
qgamma(2,2,2)
qgamma(1,2,2)
qgamma(0.99,2,2)
qgamma(0.99999999,2,2)
qgamma(0.999999999999999999999999999,2,2)
qpareto(1,2,3)
qpareto
qpareto(0,2,3)
qpareto(-0.1,2,3)
qpareto(0.0,2,3)
qpareto(0.9,2,3)
qpareto(0.9999,2,3)
1^(-0.001)
log(0)
-log(0)
qpareto
qpareto(log(0),2,3,log.p=TRUE)
qpareto(log(0),2,3,lower.tail = FALSE, log.p=TRUE)
qpareto(log(1),2,3,lower.tail = FALSE, log.p=TRUE)
0<1<2
dgamma(1.2,3,4)
qgamma(1.2,3,4)
qpareto1 <- function(p, alpha, beta, lower.tail = TRUE, log.p = FALSE) {
# Calculate the maximum length of inputs
L <- max(length(p), length(alpha), length(beta))
# Align all the inputs
p <- rep(p, length.out = L)
alpha <- rep(alpha, length.out = L)
beta <- rep(beta, length.out = L)
p.exp <- exp(p)
qs <- ifelse(alpha <= 0 | beta <= 0,
NaN,
ifelse(log.p,
ifelse(p.exp < 0 | p.exp > 1,
NaN,
ifelse(lower.tail,
alpha*(1-p.exp)^(-1/beta),
alpha*p.exp^(-1/beta))),
ifelse(p < 0 | p > 1,
NaN,
ifelse(lower.tail,
alpha*(1-p)^(-1/beta),
alpha*p^(-1/beta)))))
# Check whether NaNs exist
if (sum(is.nan(qs)))
warning("NaNs produced")
qs
}
all.equal(qpareto(c(0,0.5,1,1.5), 2, 3, lower.tail = TRUE, log.p = TRUE), qpareto1(c(0,0.5,1,1.5), 2, 3, lower.tail =TRUE, log.p =TRUE))
all.equal(qpareto(c(0,0.5,1,1.5), 2, 3, lower.tail = TRUE, log.p = FALSE), qpareto1(c(0,0.5,1,1.5), 2, 3, lower.tail =TRUE, log.p =FALSE))
qs
qpareto(c(0,0.5,1,1.5), 2, 3, lower.tail = TRUE, log.p = FALSE)
qpareto1(c(0,0.5,1,1.5), 2, 3, lower.tail =TRUE, log.p =FALSE)
qpareto1(c(0,0.5,1,1.5), 2, 3)
qpareto1(0, 2, 3)
qpareto1(1, 2, 3)
qpareto1(-1, 2, 3)
qpareto1(0, 2, 3)
qpareto1(0, 2, 3, lower.tail = FALSE)
qpareto1(log(0), 2, 3, lower.tail = FALSE, log.p= TRUE)
qpareto1(C(0,1), 2, 3)
qpareto1(c(0,1), 2, 3)
qpareto1(0, 2, 3)
1
qpareto1(1, 2, 3)
qpareto1(c(0,1), 2, 3)
qpareto1(1, 2, 3)
qpareto1(0, 2, 3)
qpareto1(c(1,0), 2, 3)
qpareto1(c(0.2,0.3), 2, 3)
qpareto1(0.2, 2, 3)
qpareto1(0.3, 2, 3)
p <- c(0,0.5,1,1.5)
alpha <- 2
beta <- 3
L <- max(length(p), length(alpha), length(beta))
p <- rep(p, length.out = L)
alpha <- rep(alpha, length.out = L)
beta <- rep(beta, length.out = L)
p
alpha
beta
p.exp <- exp(p)
qs <- ifelse(alpha <= 0 | beta <= 0,
NaN,
ifelse(log.p,
ifelse(p.exp < 0 | p.exp > 1,
NaN,
ifelse(lower.tail,
alpha*(1-p.exp)^(-1/beta),
alpha*p.exp^(-1/beta))),
ifelse(p < 0 | p > 1,
NaN,
ifelse(lower.tail,
alpha*(1-p)^(-1/beta),
alpha*p^(-1/beta)))))
log.p=FALSE
lower.tail = TRUE
qs <- ifelse(alpha <= 0 | beta <= 0,
NaN,
ifelse(log.p,
ifelse(p.exp < 0 | p.exp > 1,
NaN,
ifelse(lower.tail,
alpha*(1-p.exp)^(-1/beta),
alpha*p.exp^(-1/beta))),
ifelse(p < 0 | p > 1,
NaN,
ifelse(lower.tail,
alpha*(1-p)^(-1/beta),
alpha*p^(-1/beta)))))
qs
alpha*(1-p)^(-1/beta)
qpareto(c(0,0.5,1,1.5), 2, 3)
qpareto1(c(0,0.5,1,1.5), 2, 3)
qpareto1(c(0,0.5,1,1.5), 2, 3)
qpareto1(c(0,0.5,1,1.5), 2, 3)
qpareto1(c(1,0.5,1,1.5), 2, 3)
ifelse(p < 0 | p > 1,
NaN,
ifelse(lower.tail,
alpha*(1-p)^(-1/beta),
alpha*p^(-1/beta)))
p
alpha
beta
ifelse(p < 0 | p > 1,
NaN,
ifelse(lower.tail,
alpha*(1-p)^(-1/beta),
alpha*p^(-1/beta)))
lower.tail
p < 0 | p>1
ifelse(lower.tail,
alpha*(1-p)^(-1/beta),
alpha*p^(-1/beta))
if 2
if(2)
2 +1
? ifelse
qpareto1 <- function(p, alpha, beta, lower.tail = TRUE, log.p = FALSE) {
# Calculate the maximum length of inputs
L <- max(length(p), length(alpha), length(beta))
# Align all the inputs
p <- rep(p, length.out = L)
alpha <- rep(alpha, length.out = L)
beta <- rep(beta, length.out = L)
qs <- ifelse(alpha <= 0 | beta <= 0,
NaN,
if(log.p){
p.exp <- exp(p)
ifelse(p.exp < 0 | p.exp > 1,
NaN,
if(lower.tail){
alpha*(1-p.exp)^(-1/beta)
}else{
alpha*p.exp^(-1/beta)
})
}else{
ifelse(p < 0 | p > 1,
NaN,
if(lower.tail){
alpha*(1-p)^(-1/beta)
}else{
alpha*p^(-1/beta)
})
})
# Check whether NaNs exist
if (sum(is.nan(qs)))
warning("NaNs produced")
qs
}
qpareto1(c(1,0.5,1,1.5), 2, 3)
qpareto(c(0,0.5,1,1.5), 2, 3)
qpareto(c(0,0.5,1,1.5), 2, 3)
qpareto1(c(0,0.5,1,1.5), 2, 3)
qpareto1(c(1,0.5,1,1.5), 2, 3)
qpareto1(c(0,0.5,1,1.5), -1:1, 3)
qpareto(c(0,0.5,1,1.5), -1:1, 3)
systime(for(i in 1:1000) qpareto1(c(0,0.5,1,1.5), -1:1, 3))
system.time(for(i in 1:1000) qpareto1(c(0,0.5,1,1.5), -1:1, 3))
system.time(for(i in 1:1000) qpareto(c(0,0.5,1,1.5), -1:1, 3))
system.time(for(i in 1:1000) qpareto(c(0,0.5,1,1.5), 2, 3))
system.time(for(i in 1:1000) qpareto1(c(0,0.5,1,1.5), 2, 3))
system.time(for(i in 1:1000) qpareto1(c(0,0.5,1,1.5), 1:2, 3))
system.time(for(i in 1:1000) qpareto(c(0,0.5,1,1.5), 1:2, 3))
qpareto(c(0,0.5,1,1.5), 1:2, 3)
qpareto1(c(0,0.5,1,1.5), 1:2, 3)
qpareto1(seq(0,1.5,0.1), -1:2, 3)
qpareto(seq(0,1.5,0.1), -1:2, 3)
system.time(for(i in 1:1000) qpareto(seq(0,1.5,0.1), -1:2, 3))
system.time(for(i in 1:1000) qpareto1(seq(0,1.5,0.1), -1:2, 3))
qpareto
qpareto(c(0,0.5,1,1.5), 1:2, 3, lower.tail =FALSE)
qpareto1(c(0,0.5,1,1.5), 1:2, 3, lower.tail =FALSE)
qpareto(seq(0,1.5,0.1), -1:2, 3, lower.tail =FALSE)
qpareto1(seq(0,1.5,0.1), -1:2, 3, lower.tail =FALSE)
qpareto1(seq(0,1.5,0.1), -1:2, 3, lower.tail =FALSE)-qpareto(seq(0,1.5,0.1), -1:2, 3, lower.tail =FALSE)
qpareto(1,1,3,lower.tail=FALSE)
qpareto1(1,1,3,lower.tail=FALSE)
all.equal(qpareto1(seq(0,1.5,0.1), -1:2, 3, lower.tail =FALSE), qpareto(seq(0,1.5,0.1), -1:2, 3, lower.tail =FALSE)-qpareto(seq(0,1.5,0.1), -1:2, 3, lower.tail =FALSE))
qpareto1(seq(0,1.5,0.1), -1:2, 3, lower.tail =FALSE)
qpareto(seq(0,1.5,0.1), -1:2, 3, lower.tail =FALSE)
qpareto
1.0 == 1
seq(0,1.5,0.1)
b <- seq(0,1.5,0.1)
b[10]
b[11]
b[11]==1
b[11]-1
b[11]-1 == 0
? dpareto
b ==
1
p[p==1]
p[p==1] <- c(-1:2)
p
qpareto(seq(0,1.5,0.1), -1:2, 3, lower.tail =FALSE)
qpareto1(seq(0,1.5,0.1), -1:2, 3, lower.tail =FALSE)
qpareto
qpareto1 <- function(p, alpha, beta, lower.tail = TRUE, log.p = FALSE) {
# Calculate the maximum length of inputs
L <- max(length(p), length(alpha), length(beta))
# Align all the inputs
p <- rep(p, length.out = L)
alpha <- rep(alpha, length.out = L)
beta <- rep(beta, length.out = L)
if(log.p) p <- exp(p)
qs <- ifelse(alpha <= 0 | beta <= 0,
NaN,
ifelse(p < 0 | p > 1,
NaN,
if(lower.tail){
alpha*(1-p)^(-1/beta)
}else{
alpha*p^(-1/beta)
}))
# Check whether NaNs exist
if (sum(is.nan(qs)))
warning("NaNs produced")
qs
}
qpareto1(seq(0,1.5,0.1), -1:2, 3, lower.tail =FALSE)
qpareto(seq(0,1.5,0.1), -1:2, 3, lower.tail =FALSE)
qpareto(log(seq(0,1.5,0.1)), -1:2, 3, lower.tail =FALSE, log.p = TRUE)
qpareto1(log(seq(0,1.5,0.1)), -1:2, 3, lower.tail =FALSE, log.p = TRUE)
qpareto1(seq(0,1.5,0.1), -1:2, 3, lower.tail =FALSE)
? ggplot
library(ggplot2)
? ggplot
? Sweave
remove.packages("pareto")
ppareto(3,2,1)
library(pareto)
ppareto(3,2,1)
ppareto(1, 2, 3)
ppareto(3:5, 2, 1)
ppareto(1:5, 2, 1)
ppareto(6, 2:4, 1)
ppareto(1:5, 2, 1, lower.tail = FALSE)
stopifnot(all.equal(log(ppareto(1:5, 2, 1, lower.tail = FALSE)),
ppareto(1:5, 2, 1, lower.tail = FALSE, log.p = TRUE)))
stopifnot(all.equal(log(ppareto(1:5, 2, 1, lower.tail = FALSE)),
ppareto(1:5, 2, 1, lower.tail = FALSE, log.p = TRUE)))
all.equal(log(ppareto(1:5, 2, 1, lower.tail = FALSE)),
ppareto(1:5, 2, 1, lower.tail = FALSE, log.p = TRUE))
ppareto(1:6, 1:2, 1)
stopifnot(all.equal(ppareto(1:6, 1:2, 1),
c(0, 0, 0.66666666667, 0.5, 0.8, 0.66666666667)))
ppareto(1, 2, 1:2)
stopifnot(all.equal(ppareto(1, 2, 1:2), c(0, 0)))
stopifnot(all.equal(ppareto(3, -2, 1), NaN))
stopifnot(all.equal(ppareto(3, 2, -1), NaN))
stopifnot(all.equal(ppareto(3, 2, 1), 0.33333333333))
stopifnot(all.equal(ppareto(1, 2, 3), 0))
stopifnot(all.equal(ppareto(3:5, 2, 1), c(0.33333333333, 0.5, 0.6)))
stopifnot(all.equal(ppareto(1:5, 2, 1), c(0, 0, 0.33333333333, 0.5, 0.6)))
stopifnot(all.equal(ppareto(1:5, 2, 1, lower.tail = FALSE),
c(1, 1, 0.66666666667, 0.5, 0.4)))
stopifnot(all.equal(ppareto(6, 2:4, 1), c(0.66666666667, 0.5, 0.33333333333)))
stopifnot(all.equal(log(ppareto(1:5, 2, 1)), ppareto(1:5, 2, 1, log.p = TRUE)))
stopifnot(all.equal(log(ppareto(1:5, 2, 1, lower.tail = FALSE)),
ppareto(1:5, 2, 1, lower.tail = FALSE, log.p = TRUE)))
stopifnot(all.equal(ppareto(1:6, 1:2, 1),
c(0, 0, 0.66666666667, 0.5, 0.8, 0.66666666667)))
stopifnot(all.equal(ppareto(1, 2, 1:2), c(0, 0)))
? qpareto
qpareto(3, -2, 1)
qpareto(0.5, -2, 1)
qpareto(0.5, 2, -1
)
qpareto(3, 2, 1)
qpareto(-1, 2, 1)
stopifnot(all.equal(qpareto(3, 2, 1), NaN))
stopifnot(all.equal(qpareto(-1, 2, 1), NaN))
qpareto(0.5, 2, 1)
qpareto(1, 2, 3)
stopifnot(all.equal(qpareto(0, 2, 3), 2))
stopifnot(all.equal(qpareto(1, 2, 3), Inf))
qpareto(c(0,1,0.2), 2, 1)
qpareto(seq(0,1,0.2), 2, 1)
stopifnot(all.equal(qpareto(seq(0,1,0.2), 2, 1),
c(2, 2.5, 3.33333333333, 5, 10, Inf)))
qpareto(seq(0,1,0.2), 2, 1, lower.tail = FALSE)
qpareto(0.4, 2:4, 1)
qpareto(0.3, 2:4, 1)
qpareto(0.2, 2:4, 1)
stopifnot(all.equal(qpareto(0.2, 2:4, 1), c(2.5, 3.75, 5)))
stopifnot(all.equal(log(qpareto(seq(0,1,0.2), 2, 1)),
qpareto(seq(0,1,0.2), 2, 1, log.p = TRUE)))
stopifnot(all.equal(log(qpareto(seq(0,1,0.2), 2, 1)),
qpareto(seq(0,1,0.2), 2, 1, log.p = TRUE)))
stopifnot(all.equal(qpareto(seq(0,1,0.2), 2, 1),
qpareto(log(seq(0,1,0.2)), 2, 1, log.p = TRUE)))
qpareto(seq(0,1,0.2), 2, 1, lower.tail =FALSE)
stopifnot(all.equal(qpareto(seq(0,1,0.2), 2, 1, lower.tail =FALSE),
qpareto(log(seq(0,1,0.2)), 2, 1,
lower.tail = FALSE, log.p = TRUE)))
qpareto(seq(0,1,0.2), 1:2, 1)
qpareto(0, 2, 1:2)
library(formatT)
library(formatR)
setwd("/mnt/nfs/netapp2/grad/yliu255/Downloads/pareto/tests")
tidy_source("test.R")
tidy_source("test.R")
getwd()
tidy_source(test.R)
tidy_source("test.R")
tidy_source()
tidy_source("test.R")
setwd("/mnt/nfs/netapp2/grad/yliu255/Downloads/pareto/R")
tidy_source("dpareto.R")
setwd("/mnt/nfs/netapp2/grad/yliu255/Downloads/pareto/tests")
tidy_source("test.R")
tidy_source("tests.R")
library(pareto)
# test dpareto
stopifnot(all.equal(dpareto(3, -2, 1), NaN))
stopifnot(all.equal(dpareto(3, 2, -1), NaN))
stopifnot(all.equal(dpareto(3, 2, 1), 0.2222222222))
stopifnot(all.equal(dpareto(1, 2, 3), 0))
stopifnot(all.equal(dpareto(3:5, 2, 1), c(0.2222222222, 0.125, 0.08)))
stopifnot(all.equal(dpareto(1:5, 2, 1), c(0, 0, 0.2222222222, 0.125, 0.08)))
stopifnot(all.equal(dpareto(6, 2:4, 1),
c(0.05555555556, 0.08333333333, 0.11111111111)))
stopifnot(all.equal(log(dpareto(1:5, 2, 1)), dpareto(1:5, 2, 1, log = TRUE)))
stopifnot(all.equal(dpareto(1:6, 1:2, 1),
c(0, 0, 0.11111111111, 0.125, 0.04, 0.05555555556)))
stopifnot(all.equal(dpareto(1, 2, 1:2), c(0, 0)))
# test ppareto
stopifnot(all.equal(ppareto(3, -2, 1), NaN))
stopifnot(all.equal(ppareto(3, 2, -1), NaN))
stopifnot(all.equal(ppareto(3, 2, 1), 0.33333333333))
stopifnot(all.equal(ppareto(1, 2, 3), 0))
stopifnot(all.equal(ppareto(3:5, 2, 1), c(0.33333333333, 0.5, 0.6)))
stopifnot(all.equal(ppareto(1:5, 2, 1), c(0, 0, 0.33333333333, 0.5, 0.6)))
stopifnot(all.equal(ppareto(1:5, 2, 1, lower.tail = FALSE),
c(1, 1, 0.66666666667, 0.5, 0.4)))
stopifnot(all.equal(ppareto(6, 2:4, 1), c(0.66666666667, 0.5, 0.33333333333)))
stopifnot(all.equal(log(ppareto(1:5, 2, 1)), ppareto(1:5, 2, 1, log.p = TRUE)))
stopifnot(all.equal(log(ppareto(1:5, 2, 1, lower.tail = FALSE)),
ppareto(1:5, 2, 1, lower.tail = FALSE, log.p = TRUE)))
stopifnot(all.equal(ppareto(1:6, 1:2, 1),
c(0, 0, 0.66666666667, 0.5, 0.8, 0.66666666667)))
stopifnot(all.equal(ppareto(1, 2, 1:2), c(0, 0)))
# test qpareto
stopifnot(all.equal(qpareto(0.5, -2, 1), NaN))
stopifnot(all.equal(qpareto(0.5, 2, -1), NaN))
stopifnot(all.equal(qpareto(3, 2, 1), NaN))
stopifnot(all.equal(qpareto(-1, 2, 1), NaN))
stopifnot(all.equal(qpareto(0.5, 2, 1), 4))
stopifnot(all.equal(qpareto(1, 2, 3), Inf))
stopifnot(all.equal(qpareto(0, 2, 3), 2))
stopifnot(all.equal(qpareto(seq(0, 1, 0.2), 2, 1),
c(2, 2.5, 3.33333333333, 5, 10, Inf)))
stopifnot(all.equal(qpareto(seq(0, 1, 0.2), 2, 1, lower.tail = FALSE),
c(Inf, 10, 5, 3.33333333333, 2.5, 2)))
stopifnot(all.equal(qpareto(0.2, 2:4, 1), c(2.5, 3.75, 5)))
stopifnot(all.equal(qpareto(seq(0, 1, 0.2), 2, 1),
qpareto(log(seq(0, 1, 0.2)), 2, 1, log.p = TRUE)))
stopifnot(all.equal(qpareto(seq(0, 1, 0.2), 2, 1, lower.tail = FALSE),
qpareto(log(seq(0, 1, 0.2)), 2, 1,
lower.tail = FALSE, log.p = TRUE)))
stopifnot(all.equal(qpareto(seq(0, 1, 0.2), 1:2, 1),
c(1, 2.5, 1.66666666667, 5, 5, Inf)))
stopifnot(all.equal(qpareto(0, 2, 1:2), c(2, 2)))
remove.packages("pareto")
