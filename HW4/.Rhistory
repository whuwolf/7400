install.packages("~/s7400/STAT7400/pareto_1.0-1.tar.gz", repos = NULL, type = "source")
library(pareto)
? dpareto
dpareto(1:5, 2, 1)
dpareto(1:5, 2, 1, log = TRUE)
0.45^2+0.4^2+0.11^2+0.04^2
? crossprod
library(formatR)
tidy_source()
setwd("/mnt/nfs/netapp2/grad/yliu255/s7400/STAT7400/HW4")
tidy_source(stat7400_hw4)
tidy_source(stat7400_hw4.R)
tidy_source("stat7400_hw4.R")
x <- c(1,2,3)
x <-as.vector(x)
x
colMeans(x)
y <- c(4,5,6)
rbind(x,y)
z <- rbind(x,y)
z
colMeans(z)
typeof(colMeans(z))
class(colMeans(z))
is.vector(colMeans(z))
is.vector(colMeans(z))
is.vector(colMeans(z))
library(datasets)
library(gmp)
X <- cbind(1, as.matrix(longley[, -7]))
y <- longley[,7]
XE <- as.bigq(round(1000 * X)) / as.bigq(1000)
yE <- as.bigq(round(1000 * y)) / as.bigq(1000)
? as.bigq
lm.fit.exact(XE.yE)
# 1(a)#######################################################
library(gmp)
lm.fit.exact <- function(x, y) {
x <- as.matrix(x)
y <- as.vector(y)
x.b <- as.bigq(x)
y.b <- as.bigq(y)
as.double(solve(crossprod(x.b), crossprod(x.b, y.b)))
}
# 1(b)#######################################################
lm.fit.chol <- function(x, y, center = FALSE) {
x <- as.matrix(x)
y <- as.vector(y)
if (center) {
x.m <- colMeans(x)
x.c <- sweep(x, 2, x.m)
y.m <- mean(y)
y.c <- y - y.m
b <- lm.fit.chol(x.c, y.c)
c(y.m-crossprod(x.m, b), b)
}else{
R <- chol(crossprd(x))
as.vector(backsolve(R, forwardsolve(R, crossprod(R, y))))
}
}
# 1(a)#######################################################
library(gmp)
lm.fit.exact <- function(x, y) {
x <- as.matrix(x)
y <- as.vector(y)
x.b <- as.bigq(x)
y.b <- as.bigq(y)
as.double(solve(crossprod(x.b), crossprod(x.b, y.b)))
}
# 1(b)#######################################################
lm.fit.chol <- function(x, y, center = FALSE) {
x <- as.matrix(x)
y <- as.vector(y)
if (center) {
x.m <- colMeans(x)
x.c <- sweep(x, 2, x.m)
y.m <- mean(y)
y.c <- y - y.m
b <- lm.fit.chol(x.c, y.c)
c(y.m-crossprod(x.m, b), b)
}else{
R <- chol(crossprd(x))
as.vector(backsolve(R, forwardsolve(R, crossprod(R, y))))
}
}
lm.fit.exact(XE.yE)
lm.fit.exact(XE,yE)
lm.fit.chol(X,y)
lm.fit.chol <- function(x, y, center = FALSE) {
x <- as.matrix(x)
y <- as.vector(y)
if (center) {
x.m <- colMeans(x)
x.c <- sweep(x, 2, x.m)
y.m <- mean(y)
y.c <- y - y.m
b <- lm.fit.chol(x.c, y.c)
c(y.m-crossprod(x.m, b), b)
}else{
R <- chol(crossprod(x))
as.vector(backsolve(R, forwardsolve(R, crossprod(R, y))))
}
}
lm.fit.chol(X,y)
lm.fit.chol(X,y)
X
y
lm.fit.chol(X,y)
? crossprod
lm.fit.chol <- function(x, y, center = FALSE) {
x <- as.matrix(x)
y <- as.vector(y)
if (center) {
x.m <- colMeans(x)
x.c <- sweep(x, 2, x.m)
y.m <- mean(y)
y.c <- y - y.m
b <- lm.fit.chol(x.c, y.c)
c(y.m-crossprod(x.m, b), b)
}else{
R <- chol(crossprod(x))
as.vector(backsolve(R, forwardsolve(t(R), crossprod(R, y))))
}
}
lm.fit.chol(X,y)
lm.fit.chol(X,y)
lm.fit.exact(XE,yE)
lm.fit.chol(XE,yE)
lm.fit.chol(X,y)
X
lm.fit.chol <- function(x, y, center = FALSE) {
x <- as.matrix(x)
y <- as.vector(y)
if (center) {
x.m <- colMeans(x)
x.c <- sweep(x, 2, x.m)
y.m <- mean(y)
y.c <- y - y.m
b <- lm.fit.chol(x.c, y.c)
c(y.m-crossprod(x.m, b), b)
}else{
R <- chol(crossprod(x))
as.vector(backsolve(R, forwardsolve(t(R), crossprod(x, y))))
}
}
lm.fit.chol(X,y)
lm.fit.exact(X,y)
lm.fit.exact(X,y, center=TRUE)
lm.fit.chol(X,y, center=TRUE)
lm.fit.chol(X[,-1],y, center=TRUE)
? Sys.time
? sys.time
? system.time
sys.time(lm.fit.chol(X[,-1],y, center=TRUE))
system.time(lm.fit.chol(X[,-1],y, center=TRUE))
system.time(for (i in 1:1000){lm.fit.chol(X[,-1],y, center=TRUE)})
system.time(for (i in 1:10000){lm.fit.chol(X[,-1],y, center=TRUE)})
M <- diag(rep(1, n))
M <- diag(rep(1, 3))
m
M
diag(1,3)
? diag
diag(3)
M <- diag(3)
M <- diag(6)
M[1:3:2:5]
M[1:3:2:4]
M[1:3,2:4]
covMat <- function (n, a){
M <- diag(n)
M[cbind(2 : n, 1 : (n - 1))] <- a
M[cbind(1 : (n - 1), 2 : n)] <- a
M
}
covMat(3,2)
covMat(10,2)
? forwardsolve
install.packages("Matrix")
? forwardsolve
? chol
? diag
covMat <- function (n, a){
M <- diag(n)
M[cbind(2 : n, 1 : (n - 1))] <- a
M[cbind(1 : (n - 1), 2 : n)] <- a
M
}
loglikD <- function(y, a){
y <- as.vector(y)
C <- covMat(length(y), a)
R <- chol(C)
- sum(log(diag(R)))-0.5 * sum(forwardsolve(t(R), y) ^ 2)
}
c(1:10)
loglik(c(1:10),4)
loglikD(c(1:10),4)
loglikD(c(1:10),2)
loglikD(c(1:10),1)
loglikD(c(1:5),1)
loglikD(c(1:5),3)
covMat(3)
covMat(3,3)
loglikD(1,3)
loglikD(2,3)
loglikD(3,3)
loglikD(4,3)
loglikD(c(1,2),3)
covMat(10,6)
chol(covMat(10,6))
? chol
solve(covMat(10,6))
matrix(c(1,2,3,4))
matrix(c(1,2,3,4),2,2)
x <- matrix(c(1,2,3,4),2,2)
chol(x)
? chol
x <- matrix(c(1,2,2,1),2,2)
det(x)
x <- matrix(c(2,1,1,x),2,2)
x <- matrix(c(2,1,1,2),2,2)
det(x)
chol(x)
isSymmetric.matrix(covMat(3,1))
chol(covMat(3,2))
diag(12)
diag(1,2)
diag(2,2)
diag(c(3,4,5))
covMat <- function (n, a){
M <- diag(n)
M[cbind(2 : n, 1 : (n - 1))] <- a
M[cbind(1 : (n - 1), 2 : n)] <- a
M
}
is.matrix(covMat(3,1))
chol(covMat(3,1))
isSymmetric.matrix(covMat(3,1))
covMat <- function (n, a){
M <- diag(n)
M[cbind(2 : n, 1 : (n - 1))] <- a
M[cbind(1 : (n - 1), 2 : n)] <- a
rounding(M)
}
covMat(3,1)
? round
covMat <- function (n, a){
M <- diag(n)
M[cbind(2 : n, 1 : (n - 1))] <- a
M[cbind(1 : (n - 1), 2 : n)] <- a
round(M)
}
chol(covMat(3,1))
? chol
chol(covMat(3,0.1))
chol(covMat(3,0.9))
chol(covMat(10,0.9))
covMat <- function (n, a){
M <- diag(rep(1, n))
M[cbind(2 : n, 1 : (n - 1))] <- a
M[cbind(1 : (n - 1), 2 : n)] <- a
M
}
chol(covMat(10,0.9))
chol(covMat(10,2))
chol(covMat(10,23))
chol(covMat(10,2))
covMat(10.2)
covMat(10,2)
chol(covMat(10,0.5))
? eigen
eigen(covMat(10,1))
eigen(covMat(10,2))
eigen(covMat(10,0.5))
chol(covMat(10,0.5))
covMat <- function (n, a){
M <- diag(n)
M[cbind(2 : n, 1 : (n - 1))] <- a
M[cbind(1 : (n - 1), 2 : n)] <- a
M
}
loglikD <- function(y, a){
y <- as.vector(y)
C <- covMat(length(y), a)
R <- chol(C)
- sum(log(diag(R)))-0.5 * sum(forwardsolve(t(R), y) ^ 2)
}
loglikD(c(1,2,3,4), 0.5)
library(Matrix)
? bandSparse
? solve
? bandSparse
diags <- list(1:30, 10*(1:20), 100*(1:20))
bandSparse(13, k = -c(0:2, 6), diag = c(diags, diags[2]), symm=TRUE)
loglikS <- function(y, a){
n <- length(y)
C <- bandSparse(n, k = c(0 ,1), diag = list(rep(1,n), rep(a, n-1)), symm = TRUE)
R <- chol(C)
- sum(log(diag(R)))-0.5 * sum(solve(t(R), y) ^ 2)
}
loglikS(c(1,2,3,4), 0.5)
loglikD(c(1,2,3,4), 0.5)
x <- c(1,2,3)
cbind(1,x)
X.b <- as.bigq(round(1000 * X)) / as.bigq(1000)
X.b
lm.fit(X,y)
lm.fit.exact(X.b, y.b) - lm.fit(X,y)$coefficients
lm.fit.exact(X.b, y.b) - lm.fit.chol(X,y)
lm.fit.exact(X.b, y.b) - lm.fit.chol(X,y,center=TRUE)
X <- cbind(1, as.matrix(longley[, -7]))
y <- as.vector(longley[,7])
X.b <- as.bigq(round(1000 * X)) / as.bigq(1000)
y.b <- as.bigq(round(1000 * y)) / as.bigq(1000)
lm.fit.exact(X.b, y.b) - lm.fit(X,y)$coefficients
lm.fit.exact(X.b, y.b) - lm.fit.chol(X,y)
lm.fit.exact(X.b, y.b) - lm.fit.chol(X,y,center=TRUE)
# 1(a)#######################################################
library(gmp)
lm.fit.exact <- function(x, y) {
x <- as.matrix(x)
y <- as.vector(y)
x.b <- as.bigq(x)
y.b <- as.bigq(y)
as.double(solve(crossprod(x.b), crossprod(x.b, y.b)))
}
# 1(b)#######################################################
lm.fit.chol <- function(x, y, center = FALSE) {
x <- as.matrix(x)
y <- as.vector(y)
if (center) {
x.m <- colMeans(x)
x.c <- sweep(x, 2, x.m)
y.m <- mean(y)
y.c <- y - y.m
b <- lm.fit.chol(x.c, y.c)
c(y.m-crossprod(x.m, b), b)
}else{
R <- chol(crossprod(x))
as.vector(backsolve(R, forwardsolve(t(R), crossprod(x, y))))
}
}
# 1(c)#######################################################
X <- cbind(1, as.matrix(longley[, -7]))
y <- as.vector(longley[,7])
X.b <- as.bigq(round(1000 * X)) / as.bigq(1000)
y.b <- as.bigq(round(1000 * y)) / as.bigq(1000)
lm.fit.exact(X.b, y.b) - lm.fit(X,y)$coefficients
lm.fit.exact(X.b, y.b) - lm.fit.chol(X,y)
lm.fit.exact(X.b, y.b) - lm.fit.chol(X,y,center=TRUE)
crossprod(X.b)
X.b
is.matrix(X.b)
is.matrix(X)
as.bigq(X)
is.matrix(as.bigq(X))
lm.fit.exact <- function(x, y) {
x.b <- as.matrix(as.bigq(x))
y.b <- as.vector(as.bigq(y))
as.double(solve(crossprod(x.b), crossprod(x.b, y.b)))
}
lm.fit.exact(X.b, y.b) - lm.fit(X,y)$coefficients
lm.fit.exact <- function(x, y) {
x.b <- as.matrix(as.bigq(x))
y.b <- as.vector(as.bigq(y))
x.bt <- t(x.b)
as.double(solve(x.bt %*% x.b, x.bt %*% y.b))
}
lm.fit.exact(X.b, y.b) - lm.fit(X,y)$coefficients
lm.fit.exact(X.b, y.b) - lm.fit.chol(X,y)
lm.fit.exact(X.b, y.b) - lm.fit.chol(X,y,center=TRUE)
lm.fit.chol(X,y,center=TRUE)
lm.fit.chol(X,y,center=TRUE)
lm.fit.chol <- function(x, y, center = FALSE) {
x <- as.matrix(x)
y <- as.vector(y)
if (center) {
x.m <- colMeans(x)
x.c <- sweep(x, 2, x.m)
y.m <- mean(y)
y.c <- y - y.m
b <- lm.fit.chol(x.c, y.c)
c(y.m-crossprod(x.m, b), b)
}else{
R <- chol(t(x) %*% x)
as.vector(backsolve(R, forwardsolve(t(R), crossprod(x, y))))
}
}
lm.fit.exact(X.b, y.b) - lm.fit(X,y)$coefficients
lm.fit.exact(X.b, y.b) - lm.fit.chol(X,y)
lm.fit.exact(X.b, y.b) - lm.fit.chol(X,y,center=TRUE)
as.vector(lm.fit.exact(X.b, y.b) - lm.fit(X,y)$coefficients)
lm.fit(X,y)$coefficients
as.vector(lm.fit.exact(X.b, y.b) - lm.fit(X,y)$coefficients)
lm.fit.exact(X.b, y.b) - lm.fit.chol(X,y)
lm.fit.exact(X.b, y.b) - lm.fit.chol(X[, -1],y,center=TRUE)
tidy_source("stat7400_hw4.R")
y <- c(0, 0, 1 ,-1)
system.time(loglikD(y, 0.5))
systme.time(loglikS(y, 0.5))
? system.time
y <- c(0, 0, 1 ,-1)
system.time(for (i in 1:1000) loglikD(y, 0.5))
system.time(for (i in 1:1000) loglikS(y, 0.5))
# 2(a)#######################################################
covMat <- function(n, a) {
M <- diag(n)
M[cbind(2:n, 1:(n - 1))] <- a
M[cbind(1:(n - 1), 2:n)] <- a
M
}
loglikD <- function(y, a) {
y <- as.vector(y)
C <- covMat(length(y), a)
R <- chol(C)
-sum(log(diag(R))) - 0.5 * sum(forwardsolve(t(R), y)^2)
}
# 2(b)#######################################################
loglikS <- function(y, a) {
n <- length(y)
C <- bandSparse(n, k = c(0, 1), diag = list(rep(1, n), rep(a, n - 1)), symm = TRUE)
R <- chol(C)
-sum(log(diag(R))) - 0.5 * sum(solve(t(R), y)^2)
}
y <- c(0, 0, 1 ,-1)
system.time(for (i in 1:1000) loglikD(y, 0.5))
system.time(for (i in 1:1000) loglikS(y, 0.5))
y <- c(rep(0,2), rep(1,2) ,rep(1,2))
system.time(for (i in 1:1000) loglikD(y, 0.5))
system.time(for (i in 1:1000) loglikS(y, 0.5))
y <- c(rep(0,3), rep(1,3) ,rep(1,3))
system.time(for (i in 1:1000) loglikD(y, 0.5))
system.time(for (i in 1:1000) loglikS(y, 0.5))
y <- c(rep(0,10), rep(1,10) ,rep(1,10))
system.time(for (i in 1:1000) loglikD(y, 0.5))
system.time(for (i in 1:1000) loglikS(y, 0.5))
y <- c(rep(0,50), rep(1,50) ,rep(1,50))
system.time(for (i in 1:1000) loglikD(y, 0.5))
system.time(for (i in 1:1000) loglikS(y, 0.5))
y <- c(rep(0,100), rep(1,100) ,rep(-1,100))
system.time(for (i in 1:1000) loglikD(y, 0.5))
system.time(for (i in 1:1000) loglikS(y, 0.5))
y <- c(rep(0,50), rep(1,50) ,rep(-1,50))
system.time(for (i in 1:1000) loglikD(y, 0.5))
system.time(for (i in 1:1000) loglikS(y, 0.5))
y <- c(rep(0,80), rep(1,80) ,rep(-1,80))
system.time(for (i in 1:1000) loglikD(y, 0.5))
system.time(for (i in 1:1000) loglikS(y, 0.5))
y <- c(rep(0,60), rep(1,60) ,rep(-1,60))
system.time(for (i in 1:1000) loglikD(y, 0.5))
system.time(for (i in 1:1000) loglikS(y, 0.5))
y <- c(rep(0,70), rep(1,70) ,rep(-1,70))
system.time(for (i in 1:1000) loglikD(y, 0.5))
system.time(for (i in 1:1000) loglikS(y, 0.5))
tidy_source("stat7400_hw4.R")
y <- c(rep(0, 3), rep(1, 3), rep(-1, 3))
system.time(for (i in 1:1000) loglikD(y, 0.5))
system.time(for (i in 1:1000) loglikS(y, 0.5))
y <- c(rep(0, 10), rep(1, 10), rep(-1, 10))
system.time(for (i in 1:1000) loglikD(y, 0.5))
system.time(for (i in 1:1000) loglikS(y, 0.5))
y <- c(rep(0, 60), rep(1, 60), rep(-1, 60))
system.time(for (i in 1:1000) loglikD(y, 0.5))
system.time(for (i in 1:1000) loglikS(y, 0.5))
y <- c(rep(0, 100), rep(1, 100), rep(-1, 100))
system.time(for (i in 1:1000) loglikD(y, 0.5))
system.time(for (i in 1:1000) loglikS(y, 0.5))
system.time(for (i in 1:1000) loglikD(y, 0.5))$elapsed
loglikD(y,0.5)
loglikS(y,0.5)
