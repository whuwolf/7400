? dgamma
? dpareto
log(0)
exp(log(0))
? ifelse
a <- c(1:5)
a
b <- c(3,3,3,3,3)
b
ifelse(a>b,TRUE,FALSE)
library(formatR)
? tidy_source
tidy_source
tidy_source()
tidy_source()
tidy_source("dpareto.r")
tidy_source("dpareto.R")
tidy_source("dpareto.R")
tidy_source("dpareto.R")
tidy_source("dpareto.r")
setwd("/mnt/nfs/netapp2/grad/yliu255/s7400/STAT7400/HW2")
tidy_source("dpareto.R")
log(0)
exp(log(0))
exp(-Inf)
? ifelse
c(0,1,2,3,NaN)
a <- c(0,1,2,3,NaN)
a
exp(a)
dpareto <- function(x, a, b, log = FALSE) {
nx <- length(x)
na <- length(a)
nb <- length(b)
n <- max(nx, na, nb)
if (nx < n) x <- rep(x, length.out = n)
if (na < n) a <- rep(a, length.out = n)
if (nb < n) b <- rep(b, length.out = n)
ld <- ifelse(a > 0 & b > 0,
ifelse(x > a,
log(b) + b * log(a) - (b + 1) * log(x),
log(0)),
NaN)
if (log) ld
else exp(ld)
}
dpareto(2,-1,3)
? dgamma
dgamma(1,-2)
dpareto <- function(x, alpha, beta, log = FALSE) {
# Calculate the maximum length of inputs
L <- max(length(x), length(alpha), length(beta))
# Align all the inputs
x <- rep(x, length.out = L)
alpha <- rep(alpha, length.out = L)
beta <- rep(beta, length.out = L)
# Initialize the log densities with NaN
logdens <- rep(NaN, length.out = L)
for (i in 1:L) {
if (alpha[i] <= 0 || beta[i] <= 0) {
warning("NaNs produced")
next
} else if (x[i] < alpha[i]) {
logdens[i] <- log(0)
} else {
logdens[i] <- log(beta[i]) + beta[i]*log(alpha[i])-(beta[i]+1)*log(alpha[i])
}
}
if (log) logdens else exp(logdens)
}
dpaerto(1:3,2,4)
dpareto(1:3,2,4)
dpareto(1:3,2,4,TRUE)
stopifnot(all.equal(dpareto(3,2,1), 0.2222222222))
dpareto(3,-2,1)
dpareto(3,-2,1,TRUE)
dpareto(3,2,-1,TRUE)
dpareto(3,2,-1)
dpareto(1,2,3)
dpareto(3,2,1)
dpareto(3,2,1)
dpareto <- function(x, alpha, beta, log = FALSE) {
# Calculate the maximum length of inputs
L <- max(length(x), length(alpha), length(beta))
# Align all the inputs
x <- rep(x, length.out = L)
alpha <- rep(alpha, length.out = L)
beta <- rep(beta, length.out = L)
# Initialize the log densities with NaN
logdens <- rep(NaN, length.out = L)
for (i in 1:L) {
if (alpha[i] <= 0 || beta[i] <= 0) {
warning("NaNs produced")
next
} else if (x[i] < alpha[i]) {
logdens[i] <- log(0)
} else {
logdens[i] <- log(beta[i]) + beta[i]*log(alpha[i])-(beta[i]+1)*log(x[i])
}
}
if (log) logdens else exp(logdens)
}
dpareto(3,2,1)
dpareto(3:5,2,1)
dpareto(1:5,2,1)
dpareto(6,2:4,1)
log(dpareto(1:5,2,1))-dpareto(1:5,2,1,TRUE)
all.equal
all.equal(log(dpareto(1:5,2,1)),dpareto(1:5,2,1,TRUE))
dpareto(1:6,1:2,1)
dpareto(1,1,1)
dpareto(1,1,1)
dpareto <- function(x, alpha, beta, log = FALSE) {
# Calculate the maximum length of inputs
L <- max(length(x), length(alpha), length(beta))
# Align all the inputs
x <- rep(x, length.out = L)
alpha <- rep(alpha, length.out = L)
beta <- rep(beta, length.out = L)
# Initialize the log densities with NaN
logdens <- rep(NaN, length.out = L)
for (i in 1:L) {
if (alpha[i] <= 0 || beta[i] <= 0) {
warning("NaNs produced")
next
} else if (x[i] <= alpha[i]) {
logdens[i] <- log(0)
} else {
logdens[i] <- log(beta[i]) + beta[i]*log(alpha[i])-(beta[i]+1)*log(x[i])
}
}
if (log) logdens else exp(logdens)
}
dpareto(3,-2, 1) # bad parameter
dpareto(3,2, -1) # bar parameter
stopifnot(all.equal(dpareto(3,2,1), 0.2222222222))
stopifnot(all.equal(dpareto(1,2,3), 0.0))
stopifnot(all.equal(dpareto(3:5,2, 1), c(0.2222222222, 0.1250000, 0.0800000)))
stopifnot(all.equal(dpareto(1:5,2, 1), c(0.0, 0.0, 0.2222222222, 0.1250000, 0.0800000)))
stopifnot(all.equal(dpareto(6,2:4, 1), c(0.05555555556, 0.08333333333, 0.11111111111)))
stopifnot(all.equal(log(dpareto(1:5,2, 1)), dpareto(1:5,2, 1, log = TRUE)))
stopifnot(all.equal(dpareto(1:6,1:2, 1),
c(0.0, 0.0, 0.11111111111, 0.125, 0.04, 0.05555555556)))
stopifnot(all.equal(dpareto(1, 2, 1:2), c(0, 0)))
dpareto(3,-2, 1) # bad parameter
dpareto(3,2, -1) # bar parameter
stopifnot(all.equal(dpareto(3,2,1), 0.2222222222))
stopifnot(all.equal(dpareto(1,2,3), 0.0))
stopifnot(all.equal(dpareto(3:5,2, 1), c(0.2222222222, 0.1250000, 0.0800000)))
stopifnot(all.equal(dpareto(1:5,2, 1), c(0.0, 0.0, 0.2222222222, 0.1250000, 0.0800000)))
stopifnot(all.equal(dpareto(6,2:4, 1), c(0.05555555556, 0.08333333333, 0.11111111111)))
stopifnot(all.equal(log(dpareto(1:5,2, 1)), dpareto(1:5,2, 1, log = TRUE)))
stopifnot(all.equal(dpareto(1:6,1:2, 1),
c(0.0, 0.0, 0.11111111111, 0.125, 0.04, 0.05555555556)))
stopifnot(all.equal(dpareto(1, 2, 1:2), c(0, 1)))
dpareto(3,-2, 1) # bad parameter
dpareto(3,2, -1) # bar parameter
stopifnot(all.equal(dpareto(3,2,1), 0.2222222222))
stopifnot(all.equal(dpareto(1,2,3), 0.0))
stopifnot(all.equal(dpareto(3:5,2, 1), c(0.2222222222, 0.1250000, 0.0800000)))
stopifnot(all.equal(dpareto(1:5,2, 1), c(0.0, 0.0, 0.2222222222, 0.1250000, 0.0800000)))
stopifnot(all.equal(dpareto(6,2:4, 1), c(0.05555555556, 0.08333333333, 0.11111111111)))
stopifnot(all.equal(log(dpareto(1:5,2, 1)), dpareto(1:5,2, 1, log = TRUE)))
stopifnot(all.equal(dpareto(1:6,1:2, 1),
c(0.0, 0.0, 0.11111111111, 0.115, 0.04, 0.05555555556)))
stopifnot(all.equal(dpareto(1, 2, 1:2), c(0, 0)))
x <- 0
x <- ifelse(TRUE,warning("test",99))
x
ifelse(TRUE,warning("test",99))
ifelse(TRUE,warning("test"),99)
ifelse(TRUE,warning("test"),99)
? ifelse
? dgamma
dgamma
dpareto(,3,3)
dpareto(,-3,3)
dpareto(1,-3,3)
dpareto(1:1000,3,3)
dpareto(1:1000,c(-1,1),3)
dgamma(1:1000,c(-1,1),3)
? all.equal
all.equal(1,1)
all.equal(1,2)
is.nan(1)
is.nan(c(1,2))
is.nan(c(1,NaN))
? is.na.numeric_version
Inf
Inf
-Inf
Inf-Inf
-Inf-Inf
is.nan(NaN)
is.nan(Inf)
dpareto <- function(x, alpha, beta, log = FALSE) {
# Calculate the maximum length of inputs
L <- max(length(x), length(alpha), length(beta))
# Align all the inputs
x <- rep(x, length.out = L)
alpha <- rep(alpha, length.out = L)
beta <- rep(beta, length.out = L)
logdens <- ifelse(alpha<=0 || beta<=0,
NaN,
ifelse(x<=alpha,
log(0),
log(beta) + beta*log(alpha)-(beta+1)*log(x))
)
#Check whether NaN exists
if (sum(is.nan(logdens))) warning("NaNs produced")
if (log) logdens else exp(logdens)
}
dpareto(3,-2, 1) # bad parameter
dpareto(3,2, -1) # bar parameter
stopifnot(all.equal(dpareto(3,2,1), 0.2222222222))
stopifnot(all.equal(dpareto(1,2,3), 0.0))
stopifnot(all.equal(dpareto(3:5,2, 1), c(0.2222222222, 0.1250000, 0.0800000)))
stopifnot(all.equal(dpareto(1:5,2, 1), c(0.0, 0.0, 0.2222222222, 0.1250000, 0.0800000)))
stopifnot(all.equal(dpareto(6,2:4, 1), c(0.05555555556, 0.08333333333, 0.11111111111)))
stopifnot(all.equal(log(dpareto(1:5,2, 1)), dpareto(1:5,2, 1, log = TRUE)))
stopifnot(all.equal(dpareto(1:6,1:2, 1),
c(0.0, 0.0, 0.11111111111, 0.125, 0.04, 0.05555555556)))
stopifnot(all.equal(dpareto(1, 2, 1:2), c(0, 0)))
dpareto(3:5,2,1)
dpareto <- function(x, a, b, log = FALSE) {
nx <- length(x)
na <- length(a)
nb <- length(b)
n <- max(nx, na, nb)
if (nx < n) x <- rep(x, length.out = n)
if (na < n) a <- rep(a, length.out = n)
if (nb < n) b <- rep(b, length.out = n)
ld <- ifelse(a > 0 & b > 0,
ifelse(x > a,
log(b) + b * log(a) - (b + 1) * log(x),
log(0)),
NaN)
if (log) ld
else exp(ld)
}
dpareto(3,-2, 1) # bad parameter
dpareto(3,2, -1) # bar parameter
stopifnot(all.equal(dpareto(3,2,1), 0.2222222222))
stopifnot(all.equal(dpareto(1,2,3), 0.0))
stopifnot(all.equal(dpareto(3:5,2, 1), c(0.2222222222, 0.1250000, 0.0800000)))
stopifnot(all.equal(dpareto(1:5,2, 1), c(0.0, 0.0, 0.2222222222, 0.1250000, 0.0800000)))
stopifnot(all.equal(dpareto(6,2:4, 1), c(0.05555555556, 0.08333333333, 0.11111111111)))
stopifnot(all.equal(log(dpareto(1:5,2, 1)), dpareto(1:5,2, 1, log = TRUE)))
stopifnot(all.equal(dpareto(1:6,1:2, 1),
c(0.0, 0.0, 0.11111111111, 0.125, 0.04, 0.05555555556)))
stopifnot(all.equal(dpareto(1, 2, 1:2), c(0, 0)))
dpareto <- function(x, alpha, beta, log = FALSE) {
# Calculate the maximum length of inputs
L <- max(length(x), length(alpha), length(beta))
# Align all the inputs
x <- rep(x, length.out = L)
alpha <- rep(alpha, length.out = L)
beta <- rep(beta, length.out = L)
logdens <- ifelse(alpha<=0 || beta<=0,
NaN,
ifelse(x<=alpha,
log(0),
log(beta) + beta*log(alpha)-(beta+1)*log(x))
)
#Check whether NaN exists
if (sum(is.nan(logdens))) warning("NaNs produced")
if (log) logdens else exp(logdens)
}
dpareto(2,-1,2)
dpareto(2,1:2,2)
dpareto(2,1,2)
a <- 1:5
a
b <- c(3,3,3,3,3)
ifelse(a<b,TRUE.FALSE)
ifelse(a<b,TRUE,FALSE)
dpareto(3,2,1)
dpareto(4,2,1)
dpareto(5,2,1)
dpareto(3:5,2,1)
dpareto(3:5,2,1.TRUE)
dpareto(3:5,2,1,TRUE)
? ifelse
dpareto <- function(x, alpha, beta, log = FALSE) {
# Calculate the maximum length of inputs
L <- max(length(x), length(alpha), length(beta))
# Align all the inputs
x <- rep(x, length.out = L)
alpha <- rep(alpha, length.out = L)
beta <- rep(beta, length.out = L)
logdens <- ifelse(alpha<=0 | beta<=0,
NaN,
ifelse(x<=alpha,
log(0),
log(beta) + beta*log(alpha)-(beta+1)*log(x))
)
#Check whether NaN exists
if (sum(is.nan(logdens))) warning("NaNs produced")
if (log) logdens else exp(logdens)
}
dpareto(3,-2, 1) # bad parameter
dpareto(3,2, -1) # bar parameter
stopifnot(all.equal(dpareto(3,2,1), 0.2222222222))
stopifnot(all.equal(dpareto(1,2,3), 0.0))
stopifnot(all.equal(dpareto(3:5,2, 1), c(0.2222222222, 0.1250000, 0.0800000)))
stopifnot(all.equal(dpareto(1:5,2, 1), c(0.0, 0.0, 0.2222222222, 0.1250000, 0.0800000)))
stopifnot(all.equal(dpareto(6,2:4, 1), c(0.05555555556, 0.08333333333, 0.11111111111)))
stopifnot(all.equal(log(dpareto(1:5,2, 1)), dpareto(1:5,2, 1, log = TRUE)))
stopifnot(all.equal(dpareto(1:6,1:2, 1),
c(0.0, 0.0, 0.11111111111, 0.125, 0.04, 0.05555555556)))
stopifnot(all.equal(dpareto(1, 2, 1:2), c(0, 0)))
dpareto(3:5,2,1)
tidy_source()
tidy_source()
tidy_source("dpareto.R")
dpareto <- function(x, alpha, beta, log = FALSE) {
# Calculate the maximum length of inputs
L <- max(length(x), length(alpha), length(beta))
# Align all the inputs
x <- rep(x, length.out = L)
alpha <- rep(alpha, length.out = L)
beta <- rep(beta, length.out = L)
logdens <- ifelse(alpha <= 0 | beta <= 0,
NaN,
ifelse(x <= alpha,
log(0),
log(beta) + beta * log(alpha) - (beta + 1) * log(x)))
# Check whether NaN exists
if (sum(is.nan(logdens)))
warning("NaNs produced")
if (log) logdens else exp(logdens)
}
dpareto(3,-2, 1) # bad parameter
dpareto(3,2, -1) # bar parameter
stopifnot(all.equal(dpareto(3,2,1), 0.2222222222))
stopifnot(all.equal(dpareto(1,2,3), 0.0))
stopifnot(all.equal(dpareto(3:5,2, 1), c(0.2222222222, 0.1250000, 0.0800000)))
stopifnot(all.equal(dpareto(1:5,2, 1), c(0.0, 0.0, 0.2222222222, 0.1250000, 0.0800000)))
stopifnot(all.equal(dpareto(6,2:4, 1), c(0.05555555556, 0.08333333333, 0.11111111111)))
stopifnot(all.equal(log(dpareto(1:5,2, 1)), dpareto(1:5,2, 1, log = TRUE)))
stopifnot(all.equal(dpareto(1:6,1:2, 1),
c(0.0, 0.0, 0.11111111111, 0.125, 0.04, 0.05555555556)))
stopifnot(all.equal(dpareto(1, 2, 1:2), c(0, 0)))
dpareto(3, 2, 1)
dpareto(1, 2, 3)
dpareto(3, -2, 1)
dpareto(3, 2, -1)
dpareto(3 : 5, 2, 1)
dpareto(1 : 5, 2, 1)
dpareto(6, 2 : 4, 1)
dpareto(3, 2, 1, log = TRUE)
? plot.stepfun
example(plot.stepfun)
x <- seq(-5,5,length=1001)
y = 1/x
lines(x,y)
plot.new()
plot.window(xlim=c(-4, 4), ylim=c(-4, 4))
lines(x, y)
plot(x,y)
plot(x,y,type="l")
x <- seq(0,10,length=100)
x <- seq(0,10,length=1000)
x <- seq(0,10,length=1001)
y <- dpareto(x,1,1)
plot(x,y)
plot(x,y,type="l")
? seq
x1 <- seq(0,1,0.01)
x2 <- seq(1.01,10,0.01)
y1 <- dpareto(x1,1,1)
y2 <- dpareto(x2,1,1)
plot(x1,y1,tyoe="l")
x1 <- seq(0,1,0.01)
x2 <- seq(1.01,10,0.01)
y1 <- dpareto(x1,1,1)
y2 <- dpareto(x2,1,1)
plot(x1,y1,type="l")
x1 <- seq(0,1,0.01)
x2 <- seq(1.01,10,0.01)
y1 <- dpareto(x1,1,1)
y2 <- dpareto(x2,1,1)
plot(x1,y1,type="l")
x1 <- seq(0,1,0.01)
x2 <- seq(1.01,10,0.01)
y1 <- dpareto(x1,1,1)
y2 <- dpareto(x2,1,1)
plot(x1,y1,type="l")
range(x1)
x1 <- seq(0,1,0.01)
x2 <- seq(1.01,10,0.01)
y1 <- dpareto(x1,1,1)
y2 <- dpareto(x2,1,1)
plot(x1,y1,xlim=range(c(x1,x2)),ylim=range(c(y1,y2)),type="l")
lines(x2,y2)
x1 <- seq(0,1,0.01)
x2 <- seq(1.01,10,0.01)
y1 <- dpareto(x1,1,1)
y2 <- dpareto(x2,1,1)
plot(x1,y1,xlim=range(c(x1,x2)),ylim=range(c(y1,y2)),type="l")
lines(x2,y2)
