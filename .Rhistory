if (log.p) p <- exp(p)
if (lower.tail) p <- 1 - p
a <- ifelse(a <= 0, NaN, a)
b <- ifelse(b <= 0, NaN, b)
p <- ifelse(p < 0 | p > 1, NaN, p)
a / p^(1/b)
}
qpareto(log(0.6), 2, 1, lower.tail = FALSE, log.p = TRUE)
qpareto(log(0.6), 2, 1, lower.tail = FALSE, log.p = FALSE)
qpareto(0, 2, 1)
qpareto(1, 2, 1)
stopifnot(tryCatch(is.na(ppareto(3,-2, 1)), error = function(e) TRUE))
stopifnot(tryCatch(is.na(ppareto(3,2, -1)), error = function(e) TRUE))
stopifnot(all.equal(ppareto(3:5,2, 1), myppareto(3:5,2, 1)))
stopifnot(all.equal(ppareto(1:5,2, 1), myppareto(1:5,2, 1)))
stopifnot(all.equal(ppareto(6,2:4, 1), myppareto(6,2:4, 1)))
stopifnot(all.equal(ppareto(6,1,2:4), myppareto(6,1,2:4)))
stopifnot(all.equal(ppareto(6,1,2:4, log.p = TRUE),
myppareto(6,1,2:4, log.p = TRUE)))
stopifnot(all.equal(ppareto(6,1,2:4, log.p = TRUE, lower.tail = FALSE),
myppareto(6,1,2:4, log.p = TRUE, lower.tail = FALSE)))
stopifnot(all.equal(ppareto(10, 1, 20, log.p = TRUE, lower.tail = FALSE),
myppareto(10, 1, 20, log.p = TRUE, lower.tail = FALSE)))
stopifnot(tryCatch(is.na(qpareto(0.5,-2, 1)), error = function(e) TRUE))
stopifnot(tryCatch(is.na(qpareto(0.5,2, -1)), error = function(e) TRUE))
stopifnot(tryCatch(is.na(qpareto(-1,2, 1)), error = function(e) TRUE))
stopifnot(tryCatch(is.na(qpareto(2,2, 1)), error = function(e) TRUE))
stopifnot(all.equal(qpareto((3:5)/6,2, 1), myqpareto((3:5)/6,2, 1)))
stopifnot(all.equal(qpareto((1:5)/6,2, 1), myqpareto((1:5)/6,2, 1)))
stopifnot(all.equal(qpareto(0.25,2:4, 1), myqpareto(0.25,2:4, 1)))
stopifnot(all.equal(qpareto(0.25,1,2:4), myqpareto(0.25,1,2:4)))
stopifnot(all.equal(qpareto(log(0.25),1,2:4, log.p = TRUE),
myqpareto(log(0.25),1,2:4, log.p = TRUE)))
stopifnot(all.equal(qpareto(0.25,1,2:4, lower.tail = FALSE),
myqpareto(0.25,1,2:4, lower.tail = FALSE)))
stopifnot(all.equal(qpareto(log(0.25),1,2:4, log.p = TRUE,
lower.tail = FALSE),
myqpareto(log(0.25),1,2:4, log.p = TRUE,
lower.tail = FALSE)))
stopifnot(tryCatch(is.na(qpareto(0.5,-2, 1)), error = function(e) TRUE))
stopifnot(tryCatch(is.na(qpareto(0.5,2, -1)), error = function(e) TRUE))
stopifnot(tryCatch(is.na(qpareto(-1,2, 1)), error = function(e) TRUE))
stopifnot(tryCatch(is.na(qpareto(2,2, 1)), error = function(e) TRUE))
stopifnot(all.equal(qpareto((3:5)/6,2, 1), myqpareto((3:5)/6,2, 1)))
stopifnot(all.equal(qpareto((1:5)/6,2, 1), myqpareto((1:5)/6,2, 1)))
stopifnot(all.equal(qpareto(0.25,2:4, 1), myqpareto(0.25,2:4, 1)))
stopifnot(all.equal(qpareto(0.25,1,2:4), myqpareto(0.25,1,2:4)))
stopifnot(all.equal(qpareto(log(0.25),1,2:4, log.p = TRUE),
myqpareto(log(0.25),1,2:4, log.p = TRUE)))
stopifnot(all.equal(qpareto(0.25,1,2:4, lower.tail = FALSE),
myqpareto(0.25,1,2:4, lower.tail = FALSE)))
stopifnot(all.equal(qpareto(log(0.25),1,2:4, log.p = TRUE,
lower.tail = FALSE),
myqpareto(log(0.25),1,2:4, log.p = TRUE,
lower.tail = FALSE)))
qpareto(log(0.6), 2, 1, lower.tail = FALSE, log.p = TRUE)
qpareto(log(seq(0,1,0.2)), 2, 1, lower.tail = FALSE, log.p = TRUE)
qpareto(seq(0,1,0.2), 2, 1, lower.tail = FALSE, log.p = FALSE)
myqpareto(seq(0,1,0.2), 2, 1, lower.tail = FALSE, log.p = FALSE)
qpareto(log(0), 2, 1, lower.tail = FALSE, log.p = FALSE)
log(0)
class(log(10))
class(log(1))
typeof(log(1))
typeof(log(0))
log(0)
qpareto(log(1), 2, 1, lower.tail = FALSE, log.p = FALSE)
myqpareto(log(1), 2, 1, lower.tail = FALSE, log.p = FALSE)
myqpareto(log(0), 2, 1, lower.tail = FALSE, log.p = FALSE)
myqpareto(log(1), 2, 1, lower.tail = FALSE, log.p = FALSE)
myqpareto(log(0), 2, 1, lower.tail = FALSE, log.p = FALSE)
qpareto(log(0), 2, 1, lower.tail = FALSE, log.p = FALSE)
qpareto(log(0), 2, 1, lower.tail = FALSE, log.p = TRUE)
nyqpareto(log(0), 2, 1, lower.tail = FALSE, log.p = TRUE)
myqpareto(log(0), 2, 1, lower.tail = FALSE, log.p = TRUE)
myqpareto(log(0), 2, 1, lower.tail = TRUE, log.p = TRUE)
qpareto(log(0), 2, 1, lower.tail = TRUE, log.p = TRUE)
typeof(log(0\))
typeof(log(0))
as.double(log(0))
qpareto(log(0), 2, 1, lower.tail = TRUE, log.p = TRUE)
qpareto(log(0), 2, 1, lower.tail = TRUE, log.p = TRUE)
qpareto(NA, 2, 1, lower.tail = TRUE, log.p = TRUE)
mypareto(NA, 2, 1, lower.tail = TRUE, log.p = TRUE)
myqpareto(NA, 2, 1, lower.tail = TRUE, log.p = TRUE)
mypareto(-Inf, 2, 1, lower.tail = TRUE, log.p = TRUE)
myqpareto(-Inf, 2, 1, lower.tail = TRUE, log.p = TRUE)
qpareto(-Inf, 2, 1, lower.tail = TRUE, log.p = TRUE)
dpareto(Inf, 2, 1)
dpareto(-Inf, 2, 1)
dpareto(NA, 2, 1)
dpareto(NaN, 2, 1)
myqpareto(NaN, 2, 1)
P <- NaN
p <- NaN
ifelse(p < 0 | p > 1, NaN, p)
dpareto(NaN, 2, 1)
dpareto(NA, 2, 1)
dpareto(Inf, 2, 1)
myqpareto(2, Inf, 1)
qpareto(2, Inf, 1)
ppareto(3,-2, 1)
is.na(ppareto(3,-2, 1))
? outer
qpareto(1,2,3)
qpareto(1,2,)
qpareto(1,2,3,NA)
qpareto(1,2,3,inf)
qpareto(1,2,3,Inf)
NA_real_
NA_real
R_PosInf
? .Call
? .C
remove.packages("pareto")
load("/space/yliu255/s7400/STAT7400/HW7/.RData")
classify <- function(x, theta){
mu <- theta$mu
sigma <- theta$sigma
p <- theta$p
M <- length(mu)
Ez <- outer(x, 1 : M, function(x, i) p[i] * dnorm(x, mu[i], sigma[i]))
max.col(Ez, ties.method = "first")
}
T1.class <- array(0, dim = c(181, 217, 181))
T1.class[mask == 1] <- classify(T1.mask, theta)
x.class <- T1.class[91, , ]
y.class <- T1.class[, 109, ]
z.class <- T1.class[, , 91]
image(z = x.class, axes = FALSE, main = "Middle slice along with
X-axis", col = gray((0 : 255) / 255))
image(z = y.class, axes = FALSE, main = "Middle slice along with
Y-axis", col = gray((0 : 255) / 255))
image(z = z.class, axes = FALSE, main = "Middle slice along with
Z-axis", col = gray((1 : 4 / 4)))
remove.packages("pareto")
library(pareto)
rpareto(3,2,1)
rpareto(10^6,2,1)
checkdist <- function(a, b, n = 100000, gen = rpareto, tol = 0.005) {
y <- ppareto(gen(n, a, b), a, b)
x <- (1 : n) / (n + 1)
fit <- lm(sort(y) ~ x)
stopifnot(abs(coef(fit) - c(0, 1)) < tol)
stopifnot(summary(fit)$r.squared > 1 - tol)
}
checkdist(2, 3)
checkdist(20, 10)
checkdist(2, 3, gen = rpareto)
checkdist(20, 10, gen = rpareto)
checkdist(2:3, 3)
checkdist(2:3, 3, gen = rpareto)
## check handling of bad parameter values
checkpars <- function(a, b, gen = rpareto) {
val <- tryCatch(gen(1, a, b), error = function(e) NaN)
stopifnot(is.na(val))
}
checkpars(-2, 3)
checkpars(-2, -3)
checkpars(2, -3)
checkpars(-2, 3, gen = rpareto)
checkpars(-2, -3, gen = rpareto)
checkpars(2, -3, gen = rpareto)
## check length convention
stopifnot(tryCatch(length(rpareto(1:2, 3, 4)) == 2,
warning = function(e) stop(e)))
stopifnot(tryCatch(length(rpareto(1:2, 3, 4)) == 2,
warning = function(e) stop(e)))
## Check that GetRNGstate/PutRNGstate are being calles
r <- .Random.seed
invisible(rpareto(1, 2, 3))
if (identical(.Random.seed, r)) stop("not updating .Random.seed")
## Check reproducability
set.seed(123)
v1 <- rpareto(1, 2, 3)
set.seed(123)
v2 <- rpareto(1, 2, 3)
stopifnot(v1 == v2)
## Check against setting the seed in the generator
stopifnot(! all(rpareto(100, 2, 3) == rpareto(100, 2, 3)))
stopifnot(! all(rpareto(100, 2, 3) == rpareto(100, 2, 3)))
? rgamma
? rbeta
rgamma
rgamma(10.3,c(2,1))
rnomr
rnorm
rnorm(10,c(0,-100),1)
rnorm(10.2, 2, 3)
rnorm(10.5, 2, 3)
rnorm(10.7, 2, 3)
rnorm(101, 2, 3)
rnorm(11, 2, 3)
rnorm(10, 2, 3)
rnorm(10.9, 2, 3)
rnorm(11, 2, 3)
double(10.5)
double(a)
0 %% 1
1 %% 1
2 %% 1
floor(3.5)
floor(3)
floor(sdf)
floor(-1)
rnorm(-1,2,3)
? rpareto
rpareto(1,2,3)
rpareto(-1,2,3)
rpareto()
rpareto
floor(-2.5)
double(-2)
floor(5.6)
? florr
? floor
qpareto(3,2,1)
qpareto(3,NA,1)
qpareto(3,NaN,1)
rnorm(10,c(0,-100),1)
rnorm(10,c(NaN,-100),1)
rgamma(10,c(NaN,-100),1)
rgamma(10,c(NaN,100),1)
qpareto(3,-2,1)
qgamma(3,-2,1)
remove.packages("pareto")
install.packages("~/s7400/STAT7400/pareto_5.0-0.tar.gz", repos = NULL, type = "source")
library(pareto)
rcpareto(1,3,2)
remove.packages("pareto")
install.packages("~/s7400/STAT7400/pareto_5.0-0.tar.gz", repos = NULL, type = "source")
library(pareto)
checkdist <- function(a, b, n = 100000, gen = rpareto, tol = 0.005) {
y <- ppareto(gen(n, a, b), a, b)
x <- (1 : n) / (n + 1)
fit <- lm(sort(y) ~ x)
stopifnot(abs(coef(fit) - c(0, 1)) < tol)
stopifnot(summary(fit)$r.squared > 1 - tol)
}
checkdist(2, 3, gen = rcpareto)
checkdist(20, 10, gen = rcpareto)
checkdist(2:3, 3, gen = rcpareto)
rcpareto(1,2,3)
rcpareto(1,-2,3)
remove.packages("pareto")
rnorm(c(1,3))
rnorm(c(1,2))
rnorm(c(1,6))
rnorm(c(1,9))
rnorm(c(1,9,2))
rgamma(c(1,9,2))
rgamma
rgamma(c(1,9,2),2)
rgamma(c(9,2,1),2)
rgamma(9,2)
c(2,1,4.4)
floor(c(2,1,4.4))
install.packages("~/s7400/STAT7400/pareto_5.0-0.tar.gz", repos = NULL, type = "source")
library(pareto)
## check that F(X) is approximately U[0,1]
checkdist <- function(a, b, n = 100000, gen = rpareto, tol = 0.005) {
y <- ppareto(gen(n, a, b), a, b)
x <- (1 : n) / (n + 1)
fit <- lm(sort(y) ~ x)
stopifnot(abs(coef(fit) - c(0, 1)) < tol)
stopifnot(summary(fit)$r.squared > 1 - tol)
}
checkdist(2, 3)
checkdist(20, 10)
checkdist(2, 3, gen = rcpareto)
checkdist(20, 10, gen = rcpareto)
checkdist(2:3, 3)
checkdist(2:3, 3, gen = rcpareto)
## check handling of bad parameter values
checkpars <- function(a, b, gen = rpareto) {
val <- tryCatch(gen(1, a, b), error = function(e) NaN)
stopifnot(is.na(val))
}
checkpars(-2, 3)
checkpars(-2, -3)
checkpars(2, -3)
checkpars(-2, 3, gen = rcpareto)
checkpars(-2, -3, gen = rcpareto)
checkpars(2, -3, gen = rcpareto)
## check length convention
stopifnot(tryCatch(length(rpareto(1:2, 3, 4)) == 2,
warning = function(e) stop(e)))
stopifnot(tryCatch(length(rcpareto(1:2, 3, 4)) == 2,
warning = function(e) stop(e)))
## Check that GetRNGstate/PutRNGstate are being calles
r <- .Random.seed
invisible(rcpareto(1, 2, 3))
if (identical(.Random.seed, r)) stop("not updating .Random.seed")
## Check reproducability
set.seed(123)
v1 <- rcpareto(1, 2, 3)
set.seed(123)
v2 <- rcpareto(1, 2, 3)
stopifnot(v1 == v2)
stopifnot(! all(rpareto(100, 2, 3) == rpareto(100, 2, 3)))
stopifnot(! all(rcpareto(100, 2, 3) == rcpareto(100, 2, 3)))
rcpareto(1,2,3)
set.seed(100)
rcpareto(1,2,3)
set.seed(100)
rpareto(1,2,3)
set.seed(100)
rpareto(1,2,3)
set.seed(100)
rcpareto(1,2,3)
rcpareto(NA,2,3)
rgamma(NaN,2,1)
rgamma(c(NaN,1),2,1)
rgamma(NaN),2,1)
rgamma(NaN,2,1)
rpareto(NaN,2,1)
runif
rgamma
rpareto(NaN,2,1)
rcpareto(NaN,2,1)
rgamma
floor(NA)
floor(NAA)
floor(NAN)
floor(NaN)
rcpareto(10,c(-2,1),c(2,3))
rcpareto(10,c(NaN,1),c(2,3))
set.seed(100)
rcpareto(10,c(NaN,1),c(2,3))
set.seed(100)
rcpareto(10,c(-2,1),c(2,3))
## Check reproducability
set.seed(123)
v1 <- rcpareto(1, 2, 3)
set.seed(123)
v2 <- rcpareto(1, 2, 3)
stopifnot(v1 == v2)
set.seed(100)
rpareto(10,c(-2,1),c(2,3))
set.seed(100)
rpareto(10,c(NaN,1),c(2,3))
qpareto(0.5,NaN,1)
qpareto(0.5,-2,1)
NaN <= 0
NA
rpareto(10,c(Na,1),c(2,3))
rpareto(10,c(Na,1),c(2,3))
rpareto(10,c(NA,1),c(2,3))
rpareto(10,c(-2,1),c(2,3))
set.seed(100)
rpareto(10,c(-2,1),c(2,3))
set.seed(100)
rpareto(10,c(NA,1),c(2,3))
set.seed(100)
rcpareto(10,c(NA,1),c(2,3))
set.seed(100)
rcpareto(10,c(-2,1),c(2,3))
set.seed(100)
rcpareto(10,c(-3,1),c(2,3))
set.seed(100)
rcpareto(10,c(NA,1),c(2,3))
set.seed(100)
rcpareto(10,c(NaN,1),c(2,3))
remove.packages("pareto")
install.packages("~/s7400/STAT7400/pareto_5.0-0.tar.gz", repos = NULL, type = "source")
library(pareto)
set.seed(100)
rcpareto(10,c(NaN,1),c(2,3))
set.seed(100)
rcpareto(10,c(-2,1),c(2,3))
set.seed(100)
rpareto(10,c(-2,1),c(2,3))
set.seed(100)
rpareto(10,c(NaN,1),c(2,3))
checkdist <- function(a, b, n = 100000, gen = rpareto, tol = 0.005) {
y <- ppareto(gen(n, a, b), a, b)
x <- (1 : n) / (n + 1)
fit <- lm(sort(y) ~ x)
stopifnot(abs(coef(fit) - c(0, 1)) < tol)
stopifnot(summary(fit)$r.squared > 1 - tol)
}
coef(fit)
checkdist(2, 3)
n = 100000
tol = 0.005
a = 2
b = 3
y <- ppareto(rpareto(n, a, b), a, b)
x <- (1 : n) / (n + 1)
fit <- lm(sort(y) ~ x)
stopifnot(abs(coef(fit) - c(0, 1)) < tol)
stopifnot(summary(fit)$r.squared > 1 - tol)
coef(fit)
coef(fit)-c(0,1)
? qqplot
qqplot(ppareto(rpareto(10^6,3,2),3,2), seq(0,1, length.out = 10^6))
a <- rpareto(10^6,3,2)
qqplot(ppareto(rpareto(10^5,3,2),3,2), seq(0,1, length.out = 10^5), lty = 1)
qqplot(ppareto(rpareto(10^4,3,2),3,2), seq(0,1, length.out = 10^4), lty = 2)
qqplot(ppareto(rpareto(10^4,3,2),3,2), seq(0,1, length.out = 10^4), type = "l")
qqplot(ppareto(rpareto(10^5,3,2),3,2), seq(0,1, length.out = 10^5), type = "l")
qqplot(ppareto(rpareto(10^5,3,2),3,2), seq(0,1, length.out = 10^5), type = "l", color = "red")
qqplot(ppareto(rpareto(10^5,3,2),3,2), seq(0,1, length.out = 10^5), type = "l", col= 2)
warnings()
? dgamma
? dpareto
? dbeta
? dgamma
? rnorm
? rgamma
table(rgamma(1e4, 0.001) == 0)/1e4
? table
qqplot(ppareto(rpareto(10^5,3,2),3,2), seq(0,1, length.out = 10^5), type = "l")
qqplot(ppareto(rcpareto(10^4,3,2),3,2), seq(0,1, length.out = 10^4), type = "l")
qqplot(ppareto(rpareto(10^4,3,2),3,2), seq(0,1, length.out = 10^4), type = "l")
qqplot(ppareto(rpareto(10^4,3,2),3,2), seq(0,1, length.out = 10^4), type = "l")
qqplot(ppareto(rcpareto(10^4,3,2),3,2), seq(0,1, length.out = 10^4), type = "l")
remove.packages("pareto")
install.packages("~/s7400/STAT7400/pareto_5.0-0.tar.gz", repos = NULL, type = "source")
library(pareto)
? rcpareto
? ragmma
? rgamma
rpareto(NaN,32)
rpareto(NaN,3,2)
rpareto(4,c(100,1),2)
system.time(rpareto(10^5, 3, 2))
system.time(rpareto(10^6, 3, 2))
system.time(rcpareto(10^6, 3, 2))
a <- 1:3
b <- 1:3
a == b
set.seed(100)
a <- rpareto(c(NA,1,99), 3, 2)
set.seed(100)
b <- rpareto(4, 3, 2)
all.equal(a,b)
set.seed(100)
a <- rpareto(c(NA,1,99), 3, 2)
set.seed(100)
b <- rpareto(3, 3, 2)
all.equal(a,b)
qqplot(ppareto(rpareto(10^4,3,2),3,2), seq(0,1, length.out = 10^4), type = "l")
#Check qq-plot
qqplot(ppareto(rpareto(10^6,3,2),3,2), seq(0,1, length.out = 10^6), type = "l")
rcpareto(1,3,-2)
rcpareto(1,3,2)
rcpareto(4,c(100,1),2)
#Check reproducability
set.seed(100)
a <- rcpareto(c(NA,1,99), 3, 2)
set.seed(100)
b <- rcpareto(3, 3, 2)
all.equal(a,b)
qqplot(ppareto(rcpareto(10^6,3,2),3,2), seq(0,1, length.out = 10^6), type = "l")
qqplot(ppareto(rnorm(10^6,3,2),3,2), seq(0,1, length.out = 10^6), type = "l")
qqplot(ppareto(rcpareto(10^6,3,2),3,2), seq(0,1, length.out = 10^6), type = "l")
qqplot(ppareto(rcpareto(10^6,3,2),3,2), seq(0,1, length.out = 10^6), type = "l",
main = "QQ plot of rcpareto")
system.time(rpareto(10^6, 3, 2))
system.time(rcpareto(10^6, 3, 2))
library(pareto)
? rpareto
stopifnot(is.na(rpareto(1, 3, -2)))
stopifnot(is.na(rpareto(1, 3, -2)))
stopifnot(is.na(rcpareto(1, 3, -2)))
stopifnot(is.na(rpareto(1, -3, 2)))
stopifnot(is.na(rcpareto(1, -3, 2)))
stopifnot(is.na(rpareto(NaN, 3, 2)))
stopifnot(is.na(rcpareto(NaN, 3, 2)))
# Check reproducability
set.seed(100)
a <- rpareto(c(NA,1,99), 3, 2)
set.seed(100)
b <- rpareto(3, 3, 2)
stopifnot(a == b)
set.seed(100)
a <- rcpareto(c(NA,1,99), 3, 2)
set.seed(100)
b <- rcpareto(3, 3, 2)
stopifnot(a == b)
#Bad parameters
stopifnot(is.na(rpareto(1, 3, -2)))
stopifnot(is.na(rcpareto(1, 3, -2)))
stopifnot(is.na(rpareto(1, -3, 2)))
stopifnot(is.na(rcpareto(1, -3, 2)))
stopifnot(length(rpareto(c(NA,1,99), 5, 9)) == 3)
## Check length
stopifnot(length(rpareto(c(NA,1,99), 5, 9)) == 3)
stopifnot(length(rcpareto(c(NA,1,99), 5, 9)) == 3)
#Bad parameters
stopifnot(is.na(rpareto(1, 3, -2)))
stopifnot(is.na(rcpareto(1, 3, -2)))
stopifnot(is.na(rpareto(1, -3, 2)))
stopifnot(is.na(rcpareto(1, -3, 2)))
# Check reproducability
set.seed(100)
a <- rpareto(c(NA,1,99), 3, 2)
set.seed(100)
b <- rpareto(3, 3, 2)
stopifnot(a == b)
set.seed(100)
a <- rcpareto(c(NA,1,99), 3, 2)
set.seed(100)
b <- rcpareto(3, 3, 2)
stopifnot(a == b)
## Check length
stopifnot(length(rpareto(c(NA,1,99), 5, 9)) == 3)
stopifnot(length(rcpareto(c(NA,1,99), 5, 9)) == 3)
? rpareto
remove.packages("pareto")
remove.packages("pareto")
