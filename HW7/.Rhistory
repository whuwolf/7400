library(MASS)
attach(leuk)
u <- c(rep(1,17), rep(0,16))
n <- 33
lm.weibull <- lm(log(time)~log(wbc/10000)+u)
summary(lm.weibull)
f <- function(x){
beta0 <- x[1]
beta1 <- x[2]
beta2 <- x[3]
delta <- x[4]
z <- (log(time) - beta0 - beta1*log(wbc/10000) - beta2*u)/delta
n*log(delta) - sum(z - exp(z))
}
fit <- optim(c(2.4995, -0.5709, 0.9883, 1.249*sqrt(6)/pi), f, hessian = TRUE)
fisher_info <- solve(fit$hessian)
se <- sqrt(diag(fisher_info))
fisher)info
fisher_info
se
summary(lm.weibull)
? image
readVol <- function(fname, dim = c(181, 217, 181)) {
f<-gzfile(fname, open="rb")
on.exit(close(f))
b<-readBin(f,"integer",prod(dim),size = 1, signed = FALSE)
array(b, dim)
}
setwd("/mnt/nfs/netapp2/grad/yliu255/s7400/STAT7400/HW7")
readVol("t1_icbm_normal_1mm_pn3_rf20.rawb")
x <- readVol("t1_icbm_normal_1mm_pn3_rf20.rawb")
images(x)
image(x)
? image
x
x p[1,]
x[1,]
x
x[1,]
x[,216,]
dim(x)
image(x)
x <- seq(0, 1, length = nrow(m))
y <- seq(0, 1, length = ncol(m))
image(x, y, m, col = grey(seq(0, 1, length = 256)))
m = matrix(runif(100),10,10)
image(m, axes = FALSE, col = grey(seq(0, 1, length = 256)))
m
x[2,3,1]
x[2,3]
x[2,3,]
image(x[2,3,])
image(as.matrix(x[2,3]))
as.matrix(x[2,3])
image(as.matrix(x[2,3,]))
as.matrix(x[2,3,])
dim(x)
dim.x <- 191
dim <- dim(x)
dim
quantile()
quantile(dim[1])
? quantile
image(80:100, 100:120, x[80:100, 100:120,])
image(80:100, 100:120, as.matrix(x[80:100, 100:120,])
)
image(as.matrix(x))
image(as.matrix(x[80:100,100:120,80:100]))
y <- readVol("mask.rawb")
y
dim(y)
? plot3D
? IMAGE
? image
? outer
? log1p
myqpareto <- function(p, a, b, lower.tail = TRUE, log.p = FALSE) {
if (log.p) p <- exp(p)
if (lower.tail) p <- 1 - p
a <- ifelse(a <= 0, NaN, a)
b <- ifelse(b <= 0, NaN, b)
p <- ifelse(p < 0 | p > 1, NaN, p)
a / p^(1/b)
}
myqpareot(log(0),2,1)
myqpareto(log(0),2,1)
myqpareto(log(0),2,1, log.p =TRUE)
myqpareto(0,2,1)
? .C
getwd()
readVol <- function(fname, dim = c(181, 217, 181)) {
f<-gzfile(fname, open="rb")
on.exit(close(f))
b<-readBin(f,"integer",prod(dim),size = 1, signed = FALSE)
array(b, dim)
}
T1 <- readVol("t1_icbm_normal_1mm_pn0_rf20.rawb")
x <- T1[91, , ]
y <- T1[, 109, ]
z <- T1[, , 91]
par(mfrow = c(2, 2))
image(z = x, axes = FALSE, main = "Middle slice along with X-axis",
col = gray((0 : 255) / 255))
image(z = y, axes = FALSE, main = "Middle slice along with Y-axis",
col = gray((0 : 255) / 255))
image(z = z, axes = FALSE, main = "Middle slice along with Z-axis",
col = gray((0 : 255) / 255))
T1 <- readVol("t1_icbm_normal_1mm_pn3_rf20.rawb")
x <- T1[91, , ]
y <- T1[, 109, ]
z <- T1[, , 91]
par(mfrow = c(2, 2))
image(z = x, axes = FALSE, main = "Middle slice along with X-axis",
col = gray((0 : 255) / 255))
image(z = y, axes = FALSE, main = "Middle slice along with Y-axis",
col = gray((0 : 255) / 255))
image(z = z, axes = FALSE, main = "Middle slice along with Z-axis",
col = gray((0 : 255) / 255))
? image
image(z = x, axes = FALSE, main = "Middle slice along with X-axis")
? image
image(z = T1[91,,], main = "Middle slice along with X-axis",
col = gray((0 : 255) / 255))
par(mfrow = c(1, 1))
image(z = x, axes = FALSE, main = "Middle slice along with X-axis",
col = gray((0 : 255) / 255))
? density
T1.mask <- T1[mask == 1]
mask <- readVol("mask.rawb")
T1.mask <- T1[mask == 1]
T1.mask
library(mritc)
install.packages("mritc")
library(mritc)
? initOtsu
#(c)
EMmix1 <- function(x, theta){
mu <- theta$mu
sigam <- theta$sigam
p <- theta$p
M <- length(mu)
## E step
Ez <- outer(x, 1 : M, function(x, i) p[i] *
dnorm(x, mu[i], sigma[i]))
Ez <- sweep(Ez, 1, rowSums(Ez), "/")
colSums.Ez <- colSums(Ez)
## M step
xp <- sweep(Ez, 1, x, "*")
mu.new <- colSums(xp) / colSums.Ez
sqRes <- outer(x, mu.new, function(x, m) (x - m) ^ 2)
sigma.new <- sqrt(colSums(Ez * sqRes) / colSums.Ez)
p.new <- colSums.Ez / sum(colSums.Ez)
## pack up result
list(mu = mu.new, sigma = sigma.new, p = p.new)
}
diff <- function(x, y){
max(abs(x - y)) / (1 + max(abs(x), abs(y)))
}
coverge.check <- function(theta.new, theta,
error, iter, iter.max){
diff.mu <- diff(theta.new$mu, theta$mu)
diff.sigma <- diff(theta.new$sigam, theta$sigma)
diff.p <- diff(theta.new$p, theta$p)
flag <- 0
if (diff.mu < error[1] && diff_sigma < error[2]
&& diff.p < error[3] || iter > iter.max)
flag <- 1
flag
}
EMmix <- function(x, theta, err, iter.max){
iter <- 0
repeat {
iter <- iter + 1
theta.new <- EMmix1(x, theta)
flag <- check_stop(theta.new, theta, error, iter, iter.max)
if (flag) break
theta <- theta.new
}
list(mu = theta.new$mu, sigma = theta.new$sigma, p = theta.new$p)
}
library(mritc)
init <- initOtsu(T1.mask, 2)
theta <- list(mu=init$mu, sigma = init$sigma, p = init$prop)
err <- rep(1e-08, 3)
iter.max <- 1000
theta.est1 <- EMmix(T1.mask, theta, err, max)
data.frame(mu = theta.est1$mu, sigma = theta.est1$sigma, p = theta.est1$p)
theta <- list(mu=init$mu, sigma = init$sigma, p = init$prop)
theta
init[[1]]
init$mu
EMmix(T1.mask, theta, err, max)
EMmix(T1.mask, theta, err, max)
EMmix(T1.mask, theta)
EMmix1(T1.mask, theta)
EMmix1 <- function(x, theta){
mu <- theta$mu
sigma <- theta$sigam
p <- theta$p
M <- length(mu)
## E step
Ez <- outer(x, 1 : M, function(x, i) p[i] *
dnorm(x, mu[i], sigma[i]))
Ez <- sweep(Ez, 1, rowSums(Ez), "/")
colSums.Ez <- colSums(Ez)
## M step
xp <- sweep(Ez, 1, x, "*")
mu.new <- colSums(xp) / colSums.Ez
sqRes <- outer(x, mu.new, function(x, m) (x - m) ^ 2)
sigma.new <- sqrt(colSums(Ez * sqRes) / colSums.Ez)
p.new <- colSums.Ez / sum(colSums.Ez)
## pack up result
list(mu = mu.new, sigma = sigma.new, p = p.new)
}
diff <- function(x, y){
max(abs(x - y)) / (1 + max(abs(x), abs(y)))
}
coverge.check <- function(theta.new, theta,
error, iter, iter.max){
diff.mu <- diff(theta.new$mu, theta$mu)
diff.sigma <- diff(theta.new$sigam, theta$sigma)
diff.p <- diff(theta.new$p, theta$p)
flag <- 0
if (diff.mu < error[1] && diff_sigma < error[2]
&& diff.p < error[3] || iter > iter.max)
flag <- 1
flag
}
EMmix <- function(x, theta, err, iter.max){
iter <- 0
repeat {
iter <- iter + 1
theta.new <- EMmix1(x, theta)
flag <- check_stop(theta.new, theta, error, iter, iter.max)
if (flag) break
theta <- theta.new
}
list(mu = theta.new$mu, sigma = theta.new$sigma, p = theta.new$p)
}
library(mritc)
init <- initOtsu(T1.mask, 2)
theta <- list(mu=init$mu, sigma = init$sigma, p = init$prop)
err <- rep(1e-08, 3)
iter.max <- 1000
theta.est1 <- EMmix(T1.mask, theta, err, max)
data.frame(mu = theta.est1$mu, sigma = theta.est1$sigma, p = theta.est1$p)
theta
EMmix1(T1.mask, theta)
theta
typeof(theta)
claa(theta)
class(theta)
theta$mu+1
exp(theta$mu)
mu <- theta$mu
sigma <- theta$sigam
p <- theta$p
mu
sigma
EMmix1 <- function(x, theta){
mu <- theta$mu
sigma <- theta$sigma
p <- theta$p
M <- length(mu)
## E step
Ez <- outer(x, 1 : M, function(x, i) p[i] * dnorm(x, mu[i], sigma[i]))
Ez <- sweep(Ez, 1, rowSums(Ez), "/")
colSums.Ez <- colSums(Ez)
## M step
xp <- sweep(Ez, 1, x, "*")
mu.new <- colSums(xp) / colSums.Ez
sqRes <- outer(x, mu.new, function(x, m) (x - m) ^ 2)
sigma.new <- sqrt(colSums(Ez * sqRes) / colSums.Ez)
p.new <- colSums.Ez / sum(colSums.Ez)
## pack up result
list(mu = mu.new, sigma = sigma.new, p = p.new)
}
diff <- function(x, y){
max(abs(x - y)) / (1 + max(abs(x), abs(y)))
}
coverge.check <- function(theta.new, theta,
error, iter, iter.max){
diff.mu <- diff(theta.new$mu, theta$mu)
diff.sigma <- diff(theta.new$sigam, theta$sigma)
diff.p <- diff(theta.new$p, theta$p)
flag <- 0
if (diff.mu < error[1] && diff_sigma < error[2]
&& diff.p < error[3] || iter > iter.max)
flag <- 1
flag
}
EMmix <- function(x, theta, err, iter.max){
iter <- 0
repeat {
iter <- iter + 1
theta.new <- EMmix1(x, theta)
flag <- check_stop(theta.new, theta, error, iter, iter.max)
if (flag) break
theta <- theta.new
}
list(mu = theta.new$mu, sigma = theta.new$sigma, p = theta.new$p)
}
library(mritc)
init <- initOtsu(T1.mask, 2)
theta <- list(mu=init$mu, sigma = init$sigma, p = init$prop)
err <- rep(1e-08, 3)
iter.max <- 1000
theta.est1 <- EMmix(T1.mask, theta, err, max)
data.frame(mu = theta.est1$mu, sigma = theta.est1$sigma, p = theta.est1$p)
EMmix <- function(x, theta, err, iter.max){
iter <- 0
repeat {
iter <- iter + 1
theta.new <- EMmix1(x, theta)
flag <- coverge.check(theta.new, theta, error, iter, iter.max)
if (flag) break
theta <- theta.new
}
list(mu = theta.new$mu, sigma = theta.new$sigma, p = theta.new$p)
}
library(mritc)
init <- initOtsu(T1.mask, 2)
theta <- list(mu=init$mu, sigma = init$sigma, p = init$prop)
err <- rep(1e-08, 3)
iter.max <- 1000
theta.est1 <- EMmix(T1.mask, theta, err, max)
data.frame(mu = theta.est1$mu, sigma = theta.est1$sigma, p = theta.est1$p)
coverge.check <- function(theta.new, theta,
error, iter, iter.max){
diff.mu <- diff(theta.new$mu, theta$mu)
diff.sigma <- diff(theta.new$sigma, theta$sigma)
diff.p <- diff(theta.new$p, theta$p)
flag <- 0
if (diff.mu < error[1] && diff_sigma < error[2]
&& diff.p < error[3] || iter > iter.max)
flag <- 1
flag
}
EMmix <- function(x, theta, err, iter.max){
iter <- 0
repeat {
iter <- iter + 1
theta.new <- EMmix1(x, theta)
flag <- coverge.check(theta.new, theta, error, iter, iter.max)
if (flag) break
theta <- theta.new
}
list(mu = theta.new$mu, sigma = theta.new$sigma, p = theta.new$p)
}
library(mritc)
init <- initOtsu(T1.mask, 2)
theta <- list(mu=init$mu, sigma = init$sigma, p = init$prop)
err <- rep(1e-08, 3)
iter.max <- 1000
theta.est1 <- EMmix(T1.mask, theta, err, max)
data.frame(mu = theta.est1$mu, sigma = theta.est1$sigma, p = theta.est1$p)
coverge.check <- function(theta.new, theta,
err, iter, iter.max){
diff.mu <- diff(theta.new$mu, theta$mu)
diff.sigma <- diff(theta.new$sigma, theta$sigma)
diff.p <- diff(theta.new$p, theta$p)
flag <- 0
if (diff.mu < err[1] && diff_sigma < err[2]
&& diff.p < err[3] || iter > iter.max)
flag <- 1
flag
}
EMmix <- function(x, theta, err, iter.max){
iter <- 0
repeat {
iter <- iter + 1
theta.new <- EMmix1(x, theta)
flag <- coverge.check(theta.new, theta, err, iter, iter.max)
if (flag) break
theta <- theta.new
}
list(mu = theta.new$mu, sigma = theta.new$sigma, p = theta.new$p)
}
library(mritc)
init <- initOtsu(T1.mask, 2)
theta <- list(mu=init$mu, sigma = init$sigma, p = init$prop)
err <- rep(1e-08, 3)
iter.max <- 1000
theta.est1 <- EMmix(T1.mask, theta, err, max)
data.frame(mu = theta.est1$mu, sigma = theta.est1$sigma, p = theta.est1$p)
library(mritc)
init <- initOtsu(T1.mask, 2)
theta <- list(mu=init$mu, sigma = init$sigma, p = init$prop)
err <- rep(1e-08, 3)
iter.max <- 1000
theta.est1 <- EMmix(T1.mask, theta, err, iter.max)
iter
iter.max <- 200
theta.est1 <- EMmix(T1.mask, theta, err, iter.max)
data.frame(mu = theta.est1$mu, sigma = theta.est1$sigma, p = theta.est1$p)
coverge.check <- function(theta.new, theta,
err, iter, iter.max){
diff.mu <- diff(theta.new$mu, theta$mu)
diff.sigma <- diff(theta.new$sigma, theta$sigma)
diff.p <- diff(theta.new$p, theta$p)
flag <- 0
if (diff.mu < err[1] && diff.sigma < err[2]
&& diff.p < err[3] || iter > iter.max)
flag <- 1
flag
}
EMmix <- function(x, theta, err, iter.max){
iter <- 0
repeat {
iter <- iter + 1
theta.new <- EMmix1(x, theta)
flag <- coverge.check(theta.new, theta, err, iter, iter.max)
if (flag) break
theta <- theta.new
}
list(mu = theta.new$mu, sigma = theta.new$sigma, p = theta.new$p)
}
library(mritc)
init <- initOtsu(T1.mask, 2)
theta <- list(mu=init$mu, sigma = init$sigma, p = init$prop)
err <- rep(1e-08, 3)
iter.max <- 200
theta.est1 <- EMmix(T1.mask, theta, err, iter.max)
EMmix1(T1.mask, theta)
theta
coverge.check <- function(theta.new, theta,
err, iter, iter.max){
diff.mu <- diff(theta.new$mu, theta$mu)
diff.sigma <- diff(theta.new$sigma, theta$sigma)
diff.p <- diff(theta.new$p, theta$p)
flag <- 0
if (diff.mu < err[1] && diff.sigma < err[2]
&& diff.p < err[3] || iter > iter.max)
flag <- 1
flag
}
EMmix <- function(x, theta, err, iter.max){
iter <- 0
repeat {
iter <- iter + 1
theta.new <- EMmix1(x, theta)
flag <- coverge.check(theta.new, theta, err, iter, iter.max)
if (flag) break
theta <- theta.new
}
list(mu = theta.new$mu, sigma = theta.new$sigma, p = theta.new$p)
}
library(mritc)
init <- initOtsu(T1.mask, 2)
theta <- list(mu=init$mu, sigma = init$sigma, p = init$prop)
err <- rep(1e-08, 3)
iter.max <- 200
theta.est1 <- EMmix(T1.mask, theta, err, iter.max)
data.frame(mu = theta.est1$mu, sigma = theta.est1$sigma, p = theta.est1$p)
theta
classify <- function(x, theta){
mu <- theta$mu
sigma <- theta$sigma
p <- theta$p
M <- length(mu)
Ez <- outer(x, 1 : M, function(x, i) p[i] * dnorm(x, mu[i], sigma[i]))
max.col(Ez, ties.method = "first")
}
T1.class <- array(0, dim = c(181, 217, 181))
T1.class[mask == 1] <- classify(T1.mask, theta)
x.class <- T1.class[91, , ]
y.class <- T1.class[, 109, ]
z.class <- T1.class[, , 91]
image(z = x_class, axes = FALSE, main = "Middle slice along with
X-axis", col = gray((0 : 255) / 255))
image(z = y_class, axes = FALSE, main = "Middle slice along with
Y-axis", col = gray((0 : 255) / 255)
image(z = z_class, axes = FALSE, main = "Middle slice along with
Z-axis", col = gray((1 : 4 / 4)))
T1.class <- array(0, dim = c(181, 217, 181))
T1.class[mask == 1] <- classify(T1.mask, theta)
x.class <- T1.class[91, , ]
y.class <- T1.class[, 109, ]
z.class <- T1.class[, , 91]
image(z = x.class, axes = FALSE, main = "Middle slice along with
X-axis", col = gray((0 : 255) / 255))
image(z = y.class, axes = FALSE, main = "Middle slice along with
Y-axis", col = gray((0 : 255) / 255)
image(z = z.class, axes = FALSE, main = "Middle slice along with
Z-axis", col = gray((1 : 4 / 4)))
T1.class[mask == 1] <- classify(T1.mask, theta)
)
SDF
))
}
}]
